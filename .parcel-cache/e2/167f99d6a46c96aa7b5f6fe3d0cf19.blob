import   "7fac4e5b1c58fcd6ec80f006b6bd695e:@babel/runtime/helpers/esm/extends";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:react";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:prop-types";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:react-dom";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:clsx";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:@material-ui/utils";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:../utils/useForkRef";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:../utils/useEventCallback";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:../utils/deprecatedPropType";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:../styles/withStyles";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:../utils/useIsFocusVisible";
import   "7fac4e5b1c58fcd6ec80f006b6bd695e:./TouchRipple";
var $7fac4e5b1c58fcd6ec80f006b6bd695e$export$1155669653ed4fad = {
    /* Styles applied to the root element. */ root: {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        textDecoration: 'none',
        // So we take precedent over the style of a native <a /> element.
        color: 'inherit',
        '&::-moz-focus-inner': {
            borderStyle: 'none'
        },
        '&$disabled': {
            pointerEvents: 'none',
            // Disable link interactions
            cursor: 'default'
        },
        '@media print': {
            colorAdjust: 'exact'
        }
    },
    /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {
    },
    /* Pseudo-class applied to the root element if keyboard focused. */ focusVisible: {
    }
};
/**
 * `ButtonBase` contains as few styles as possible.
 * It aims to be a simple building block for creating a button.
 * It contains a load of style reset and some focus/ripple logic.
 */ var $7fac4e5b1c58fcd6ec80f006b6bd695e$var$ButtonBase = /*#__PURE__*/ $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$ac92bb288368c37c(function ButtonBase(props, ref) {
    var action = props.action, buttonRefProp = props.buttonRef, _props$centerRipple = props.centerRipple, centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple, children = props.children, classes = props.classes, className = props.className, _props$component = props.component, component = _props$component === void 0 ? 'button' : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$disableTouchRi = props.disableTouchRipple, disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi, _props$focusRipple = props.focusRipple, focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple, focusVisibleClassName = props.focusVisibleClassName, onBlur = props.onBlur, onClick = props.onClick, onFocus = props.onFocus, onFocusVisible = props.onFocusVisible, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, onMouseDown = props.onMouseDown, onMouseLeave = props.onMouseLeave, onMouseUp = props.onMouseUp, onTouchEnd = props.onTouchEnd, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onDragLeave = props.onDragLeave, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, TouchRippleProps = props.TouchRippleProps, _props$type = props.type, type = _props$type === void 0 ? 'button' : _props$type, other = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "action",
        "buttonRef",
        "centerRipple",
        "children",
        "classes",
        "className",
        "component",
        "disabled",
        "disableRipple",
        "disableTouchRipple",
        "focusRipple",
        "focusVisibleClassName",
        "onBlur",
        "onClick",
        "onFocus",
        "onFocusVisible",
        "onKeyDown",
        "onKeyUp",
        "onMouseDown",
        "onMouseLeave",
        "onMouseUp",
        "onTouchEnd",
        "onTouchMove",
        "onTouchStart",
        "onDragLeave",
        "tabIndex",
        "TouchRippleProps",
        "type"
    ]);
    var buttonRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$575893c07881cfe8(null);
    function getButtonNode() {
        // #StrictMode ready
        return $7fac4e5b1c58fcd6ec80f006b6bd695e$import$9c1aa63963514e3e$1817be7fffc127f2(buttonRef.current);
    }
    var rippleRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var _React$useState = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$f54936751fc2c51(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    if (disabled && focusVisible) setFocusVisible(false);
    var _useIsFocusVisible = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$c345deb6b32231c9$9099ad97b570f7c(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$718bc1f42abf35a1(action, function() {
        return {
            focusVisible: function focusVisible1() {
                setFocusVisible(true);
                buttonRef.current.focus();
            }
        };
    }, []);
    $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (focusVisible && focusRipple && !disableRipple) rippleRef.current.pulsate();
    }, [
        disableRipple,
        focusRipple,
        focusVisible
    ]);
    function useRippleHandler(rippleAction, eventCallback) {
        var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
        return $7fac4e5b1c58fcd6ec80f006b6bd695e$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
            if (eventCallback) eventCallback(event);
            var ignore = skipRippleAction;
            if (!ignore && rippleRef.current) rippleRef.current[rippleAction](event);
            return true;
        });
    }
    var handleMouseDown = useRippleHandler('start', onMouseDown);
    var handleDragLeave = useRippleHandler('stop', onDragLeave);
    var handleMouseUp = useRippleHandler('stop', onMouseUp);
    var handleMouseLeave = useRippleHandler('stop', function(event) {
        if (focusVisible) event.preventDefault();
        if (onMouseLeave) onMouseLeave(event);
    });
    var handleTouchStart = useRippleHandler('start', onTouchStart);
    var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
    var handleTouchMove = useRippleHandler('stop', onTouchMove);
    var handleBlur = useRippleHandler('stop', function(event) {
        if (focusVisible) {
            onBlurVisible(event);
            setFocusVisible(false);
        }
        if (onBlur) onBlur(event);
    }, false);
    var handleFocus = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) buttonRef.current = event.currentTarget;
        if (isFocusVisible(event)) {
            setFocusVisible(true);
            if (onFocusVisible) onFocusVisible(event);
        }
        if (onFocus) onFocus(event);
    });
    var isNonNativeButton = function isNonNativeButton1() {
        var button = getButtonNode();
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    /**
   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
   */ var keydownRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$575893c07881cfe8(false);
    var handleKeyDown = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
            keydownRef.current = true;
            event.persist();
            rippleRef.current.stop(event, function() {
                rippleRef.current.start(event);
            });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') event.preventDefault();
        if (onKeyDown) onKeyDown(event);
         // Keyboard accessibility for non interactive elements
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
            event.preventDefault();
            if (onClick) onClick(event);
        }
    });
    var handleKeyUp = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
            keydownRef.current = false;
            event.persist();
            rippleRef.current.stop(event, function() {
                rippleRef.current.pulsate(event);
            });
        }
        if (onKeyUp) onKeyUp(event);
         // Keyboard accessibility for non interactive elements
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) onClick(event);
    });
    var ComponentProp = component;
    if (ComponentProp === 'button' && other.href) ComponentProp = 'a';
    var buttonProps = {
    };
    if (ComponentProp === 'button') {
        buttonProps.type = type;
        buttonProps.disabled = disabled;
    } else {
        if (ComponentProp !== 'a' || !other.href) buttonProps.role = 'button';
        buttonProps['aria-disabled'] = disabled;
    }
    var handleUserRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f0ac2eb29a789ac2$9099ad97b570f7c(buttonRefProp, ref);
    var handleOwnRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f0ac2eb29a789ac2$9099ad97b570f7c(focusVisibleRef, buttonRef);
    var handleRef = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f0ac2eb29a789ac2$9099ad97b570f7c(handleUserRef, handleOwnRef);
    var _React$useState2 = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$f54936751fc2c51(false), mountedState = _React$useState2[0], setMountedState = _React$useState2[1];
    $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        setMountedState(true);
    }, []);
    var enableTouchRipple = mountedState && !disableRipple && !disabled;
    return(/*#__PURE__*/ $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$2f8418d37d4320b9(ComponentProp, $7fac4e5b1c58fcd6ec80f006b6bd695e$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        className: $7fac4e5b1c58fcd6ec80f006b6bd695e$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, className, focusVisible && [
            classes.focusVisible,
            focusVisibleClassName
        ], disabled && classes.disabled),
        onBlur: handleBlur,
        onClick: onClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex
    }, buttonProps, other), children, enableTouchRipple ? /*#__PURE__*/ /* TouchRipple is only needed client-side, x2 boost on the server. */ $7fac4e5b1c58fcd6ec80f006b6bd695e$import$f02ba03fc070e88c$2f8418d37d4320b9($7fac4e5b1c58fcd6ec80f006b6bd695e$import$eacced183aecf94d$9099ad97b570f7c, $7fac4e5b1c58fcd6ec80f006b6bd695e$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        ref: rippleRef,
        center: centerRipple
    }, TouchRippleProps)) : null));
});
var $7fac4e5b1c58fcd6ec80f006b6bd695e$export$9099ad97b570f7c = $7fac4e5b1c58fcd6ec80f006b6bd695e$import$abdf0c7fda13cc01$9099ad97b570f7c($7fac4e5b1c58fcd6ec80f006b6bd695e$export$1155669653ed4fad, {
    name: 'MuiButtonBase'
})($7fac4e5b1c58fcd6ec80f006b6bd695e$var$ButtonBase);
