import   "9db9b793df66f12ff7d30a1049548463:@babel/runtime/helpers/esm/toConsumableArray";
import   "9db9b793df66f12ff7d30a1049548463:@babel/runtime/helpers/esm/slicedToArray";
import   "9db9b793df66f12ff7d30a1049548463:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "9db9b793df66f12ff7d30a1049548463:@babel/runtime/helpers/esm/extends";
import   "9db9b793df66f12ff7d30a1049548463:react";
import   "9db9b793df66f12ff7d30a1049548463:prop-types";
import   "9db9b793df66f12ff7d30a1049548463:clsx";
import   "9db9b793df66f12ff7d30a1049548463:@material-ui/utils";
import   "9db9b793df66f12ff7d30a1049548463:../styles/withStyles";
import   "9db9b793df66f12ff7d30a1049548463:../styles/useTheme";
import   "9db9b793df66f12ff7d30a1049548463:../styles/colorManipulator";
import   "9db9b793df66f12ff7d30a1049548463:../utils/useIsFocusVisible";
import   "9db9b793df66f12ff7d30a1049548463:../utils/ownerDocument";
import   "9db9b793df66f12ff7d30a1049548463:../utils/useEventCallback";
import   "9db9b793df66f12ff7d30a1049548463:../utils/useForkRef";
import   "9db9b793df66f12ff7d30a1049548463:../utils/capitalize";
import   "9db9b793df66f12ff7d30a1049548463:../utils/useControlled";
import   "9db9b793df66f12ff7d30a1049548463:./ValueLabel";
function $9db9b793df66f12ff7d30a1049548463$var$asc(a, b) {
    return a - b;
}
function $9db9b793df66f12ff7d30a1049548463$var$clamp(value, min, max) {
    return Math.min(Math.max(min, value), max);
}
function $9db9b793df66f12ff7d30a1049548463$var$findClosest(values, currentValue) {
    var _values$reduce = values.reduce(function(acc, value, index) {
        var distance = Math.abs(currentValue - value);
        if (acc === null || distance < acc.distance || distance === acc.distance) return {
            distance: distance,
            index: index
        };
        return acc;
    }, null), closestIndex = _values$reduce.index;
    return closestIndex;
}
function $9db9b793df66f12ff7d30a1049548463$var$trackFinger(event, touchId) {
    if (touchId.current !== undefined && event.changedTouches) {
        for(var i = 0; i < event.changedTouches.length; i += 1){
            var touch = event.changedTouches[i];
            if (touch.identifier === touchId.current) return {
                x: touch.clientX,
                y: touch.clientY
            };
        }
        return false;
    }
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function $9db9b793df66f12ff7d30a1049548463$var$valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
}
function $9db9b793df66f12ff7d30a1049548463$var$percentToValue(percent, min, max) {
    return (max - min) * percent + min;
}
function $9db9b793df66f12ff7d30a1049548463$var$getDecimalPrecision(num) {
    // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
    // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
    if (Math.abs(num) < 1) {
        var parts = num.toExponential().split('e-');
        var matissaDecimalPart = parts[0].split('.')[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    var decimalPart = num.toString().split('.')[1];
    return decimalPart ? decimalPart.length : 0;
}
function $9db9b793df66f12ff7d30a1049548463$var$roundValueToStep(value, step, min) {
    var nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed($9db9b793df66f12ff7d30a1049548463$var$getDecimalPrecision(step)));
}
function $9db9b793df66f12ff7d30a1049548463$var$setValueIndex(_ref) {
    var values = _ref.values, source = _ref.source, newValue = _ref.newValue, index = _ref.index;
    // Performance shortcut
    if (values[index] === newValue) return source;
    var output = values.slice();
    output[index] = newValue;
    return output;
}
function $9db9b793df66f12ff7d30a1049548463$var$focusThumb(_ref2) {
    var sliderRef = _ref2.sliderRef, activeIndex = _ref2.activeIndex, setActive = _ref2.setActive;
    if (!sliderRef.current.contains(document.activeElement) || Number(document.activeElement.getAttribute('data-index')) !== activeIndex) sliderRef.current.querySelector("[role=\"slider\"][data-index=\"".concat(activeIndex, "\"]")).focus();
    if (setActive) setActive(activeIndex);
}
var $9db9b793df66f12ff7d30a1049548463$var$axisProps = {
    horizontal: {
        offset: function offset(percent) {
            return {
                left: "".concat(percent, "%")
            };
        },
        leap: function leap(percent) {
            return {
                width: "".concat(percent, "%")
            };
        }
    },
    'horizontal-reverse': {
        offset: function offset(percent) {
            return {
                right: "".concat(percent, "%")
            };
        },
        leap: function leap(percent) {
            return {
                width: "".concat(percent, "%")
            };
        }
    },
    vertical: {
        offset: function offset(percent) {
            return {
                bottom: "".concat(percent, "%")
            };
        },
        leap: function leap(percent) {
            return {
                height: "".concat(percent, "%")
            };
        }
    }
};
var $9db9b793df66f12ff7d30a1049548463$var$Identity = function Identity(x) {
    return x;
};
var $9db9b793df66f12ff7d30a1049548463$export$1155669653ed4fad = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            height: 2,
            width: '100%',
            boxSizing: 'content-box',
            padding: '13px 0',
            display: 'inline-block',
            position: 'relative',
            cursor: 'pointer',
            touchAction: 'none',
            color: theme.palette.primary.main,
            WebkitTapHighlightColor: 'transparent',
            '&$disabled': {
                pointerEvents: 'none',
                cursor: 'default',
                color: theme.palette.grey[400]
            },
            '&$vertical': {
                width: 2,
                height: '100%',
                padding: '0 13px'
            },
            // The primary input mechanism of the device includes a pointing device of limited accuracy.
            '@media (pointer: coarse)': {
                // Reach 42px touch target, about ~8mm on screen.
                padding: '20px 0',
                '&$vertical': {
                    padding: '0 20px'
                }
            },
            '@media print': {
                colorAdjust: 'exact'
            }
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            color: theme.palette.secondary.main
        },
        /* Styles applied to the root element if `marks` is provided with at least one label. */ marked: {
            marginBottom: 20,
            '&$vertical': {
                marginBottom: 'auto',
                marginRight: 20
            }
        },
        /* Pseudo-class applied to the root element if `orientation="vertical"`. */ vertical: {
        },
        /* Pseudo-class applied to the root and thumb element if `disabled={true}`. */ disabled: {
        },
        /* Styles applied to the rail element. */ rail: {
            display: 'block',
            position: 'absolute',
            width: '100%',
            height: 2,
            borderRadius: 1,
            backgroundColor: 'currentColor',
            opacity: 0.38,
            '$vertical &': {
                height: '100%',
                width: 2
            }
        },
        /* Styles applied to the track element. */ track: {
            display: 'block',
            position: 'absolute',
            height: 2,
            borderRadius: 1,
            backgroundColor: 'currentColor',
            '$vertical &': {
                width: 2
            }
        },
        /* Styles applied to the track element if `track={false}`. */ trackFalse: {
            '& $track': {
                display: 'none'
            }
        },
        /* Styles applied to the track element if `track="inverted"`. */ trackInverted: {
            '& $track': {
                backgroundColor: theme.palette.type === 'light' ? $9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$4b2aa9509b3a299c(theme.palette.primary.main, 0.62) : $9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$35364ebff010920c(theme.palette.primary.main, 0.5)
            },
            '& $rail': {
                opacity: 1
            }
        },
        /* Styles applied to the thumb element. */ thumb: {
            position: 'absolute',
            width: 12,
            height: 12,
            marginLeft: -6,
            marginTop: -5,
            boxSizing: 'border-box',
            borderRadius: '50%',
            outline: 0,
            backgroundColor: 'currentColor',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: theme.transitions.create([
                'box-shadow'
            ], {
                duration: theme.transitions.duration.shortest
            }),
            '&::after': {
                position: 'absolute',
                content: '""',
                borderRadius: '50%',
                // reach 42px hit target (2 * 15 + thumb diameter)
                left: -15,
                top: -15,
                right: -15,
                bottom: -15
            },
            '&$focusVisible,&:hover': {
                boxShadow: "0px 0px 0px 8px ".concat($9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$9ea11009bc462ef5(theme.palette.primary.main, 0.16)),
                '@media (hover: none)': {
                    boxShadow: 'none'
                }
            },
            '&$active': {
                boxShadow: "0px 0px 0px 14px ".concat($9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$9ea11009bc462ef5(theme.palette.primary.main, 0.16))
            },
            '&$disabled': {
                width: 8,
                height: 8,
                marginLeft: -4,
                marginTop: -3,
                '&:hover': {
                    boxShadow: 'none'
                }
            },
            '$vertical &': {
                marginLeft: -5,
                marginBottom: -6
            },
            '$vertical &$disabled': {
                marginLeft: -3,
                marginBottom: -4
            }
        },
        /* Styles applied to the thumb element if `color="primary"`. */ thumbColorPrimary: {
        },
        /* Styles applied to the thumb element if `color="secondary"`. */ thumbColorSecondary: {
            '&$focusVisible,&:hover': {
                boxShadow: "0px 0px 0px 8px ".concat($9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$9ea11009bc462ef5(theme.palette.secondary.main, 0.16))
            },
            '&$active': {
                boxShadow: "0px 0px 0px 14px ".concat($9db9b793df66f12ff7d30a1049548463$import$78cd920a0798486b$9ea11009bc462ef5(theme.palette.secondary.main, 0.16))
            }
        },
        /* Pseudo-class applied to the thumb element if it's active. */ active: {
        },
        /* Pseudo-class applied to the thumb element if keyboard focused. */ focusVisible: {
        },
        /* Styles applied to the thumb label element. */ valueLabel: {
            // IE 11 centering bug, to remove from the customization demos once no longer supported
            left: 'calc(-50% - 4px)'
        },
        /* Styles applied to the mark element. */ mark: {
            position: 'absolute',
            width: 2,
            height: 2,
            borderRadius: 1,
            backgroundColor: 'currentColor'
        },
        /* Styles applied to the mark element if active (depending on the value). */ markActive: {
            backgroundColor: theme.palette.background.paper,
            opacity: 0.8
        },
        /* Styles applied to the mark label element. */ markLabel: $9db9b793df66f12ff7d30a1049548463$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, theme.typography.body2, {
            color: theme.palette.text.secondary,
            position: 'absolute',
            top: 26,
            transform: 'translateX(-50%)',
            whiteSpace: 'nowrap',
            '$vertical &': {
                top: 'auto',
                left: 26,
                transform: 'translateY(50%)'
            },
            '@media (pointer: coarse)': {
                top: 40,
                '$vertical &': {
                    left: 31
                }
            }
        }),
        /* Styles applied to the mark label element if active (depending on the value). */ markLabelActive: {
            color: theme.palette.text.primary
        }
    };
};
var $9db9b793df66f12ff7d30a1049548463$var$Slider = /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$ac92bb288368c37c(function Slider(props, ref) {
    var ariaLabel = props['aria-label'], ariaLabelledby = props['aria-labelledby'], ariaValuetext = props['aria-valuetext'], classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, _props$component = props.component, Component = _props$component === void 0 ? 'span' : _props$component, defaultValue = props.defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, getAriaLabel = props.getAriaLabel, getAriaValueText = props.getAriaValueText, _props$marks = props.marks, marksProp = _props$marks === void 0 ? false : _props$marks, _props$max = props.max, max = _props$max === void 0 ? 100 : _props$max, _props$min = props.min, min = _props$min === void 0 ? 0 : _props$min, name = props.name, onChange = props.onChange, onChangeCommitted = props.onChangeCommitted, onMouseDown = props.onMouseDown, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, _props$scale = props.scale, scale = _props$scale === void 0 ? $9db9b793df66f12ff7d30a1049548463$var$Identity : _props$scale, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, _props$ThumbComponent = props.ThumbComponent, ThumbComponent = _props$ThumbComponent === void 0 ? 'span' : _props$ThumbComponent, _props$track = props.track, track = _props$track === void 0 ? 'normal' : _props$track, valueProp = props.value, _props$ValueLabelComp = props.ValueLabelComponent, ValueLabelComponent = _props$ValueLabelComp === void 0 ? $9db9b793df66f12ff7d30a1049548463$import$7fe0d6cb7815120c$9099ad97b570f7c : _props$ValueLabelComp, _props$valueLabelDisp = props.valueLabelDisplay, valueLabelDisplay = _props$valueLabelDisp === void 0 ? 'off' : _props$valueLabelDisp, _props$valueLabelForm = props.valueLabelFormat, valueLabelFormat = _props$valueLabelForm === void 0 ? $9db9b793df66f12ff7d30a1049548463$var$Identity : _props$valueLabelForm, other = $9db9b793df66f12ff7d30a1049548463$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "aria-label",
        "aria-labelledby",
        "aria-valuetext",
        "classes",
        "className",
        "color",
        "component",
        "defaultValue",
        "disabled",
        "getAriaLabel",
        "getAriaValueText",
        "marks",
        "max",
        "min",
        "name",
        "onChange",
        "onChangeCommitted",
        "onMouseDown",
        "orientation",
        "scale",
        "step",
        "ThumbComponent",
        "track",
        "value",
        "ValueLabelComponent",
        "valueLabelDisplay",
        "valueLabelFormat"
    ]);
    var theme = $9db9b793df66f12ff7d30a1049548463$import$d08d112fbc8a4e1d$9099ad97b570f7c();
    var touchId = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$575893c07881cfe8(); // We can't use the :active browser pseudo-classes.
    // - The active state isn't triggered when clicking on the rail.
    // - The active state isn't transfered when inversing a range slider.
    var _React$useState = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$f54936751fc2c51(-1), active = _React$useState[0], setActive = _React$useState[1];
    var _React$useState2 = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$f54936751fc2c51(-1), open = _React$useState2[0], setOpen = _React$useState2[1];
    var _useControlled = $9db9b793df66f12ff7d30a1049548463$import$ec153815d5f7d5c0$9099ad97b570f7c({
        controlled: valueProp,
        default: defaultValue,
        name: 'Slider'
    }), _useControlled2 = $9db9b793df66f12ff7d30a1049548463$import$d595881c45598ae7$9099ad97b570f7c(_useControlled, 2), valueDerived = _useControlled2[0], setValueState = _useControlled2[1];
    var range = Array.isArray(valueDerived);
    var values = range ? valueDerived.slice().sort($9db9b793df66f12ff7d30a1049548463$var$asc) : [
        valueDerived
    ];
    values = values.map(function(value) {
        return $9db9b793df66f12ff7d30a1049548463$var$clamp(value, min, max);
    });
    var marks = marksProp === true && step !== null ? $9db9b793df66f12ff7d30a1049548463$import$4d3a86197f512b9$9099ad97b570f7c(Array(Math.floor((max - min) / step) + 1)).map(function(_, index) {
        return {
            value: min + step * index
        };
    }) : marksProp || [];
    var _useIsFocusVisible = $9db9b793df66f12ff7d30a1049548463$import$c345deb6b32231c9$9099ad97b570f7c(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
    var _React$useState3 = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$f54936751fc2c51(-1), focusVisible = _React$useState3[0], setFocusVisible = _React$useState3[1];
    var sliderRef = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$575893c07881cfe8();
    var handleFocusRef = $9db9b793df66f12ff7d30a1049548463$import$f0ac2eb29a789ac2$9099ad97b570f7c(focusVisibleRef, sliderRef);
    var handleRef = $9db9b793df66f12ff7d30a1049548463$import$f0ac2eb29a789ac2$9099ad97b570f7c(ref, handleFocusRef);
    var handleFocus = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));
        if (isFocusVisible(event)) setFocusVisible(index);
        setOpen(index);
    });
    var handleBlur = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function() {
        if (focusVisible !== -1) {
            setFocusVisible(-1);
            onBlurVisible();
        }
        setOpen(-1);
    });
    var handleMouseOver = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));
        setOpen(index);
    });
    var handleMouseLeave = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function() {
        setOpen(-1);
    });
    var isRtl = theme.direction === 'rtl';
    var handleKeyDown = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));
        var value = values[index];
        var tenPercents = (max - min) / 10;
        var marksValues = marks.map(function(mark) {
            return mark.value;
        });
        var marksIndex = marksValues.indexOf(value);
        var newValue;
        var increaseKey = isRtl ? 'ArrowLeft' : 'ArrowRight';
        var decreaseKey = isRtl ? 'ArrowRight' : 'ArrowLeft';
        switch(event.key){
            case 'Home':
                newValue = min;
                break;
            case 'End':
                newValue = max;
                break;
            case 'PageUp':
                if (step) newValue = value + tenPercents;
                break;
            case 'PageDown':
                if (step) newValue = value - tenPercents;
                break;
            case increaseKey:
            case 'ArrowUp':
                if (step) newValue = value + step;
                else newValue = marksValues[marksIndex + 1] || marksValues[marksValues.length - 1];
                break;
            case decreaseKey:
            case 'ArrowDown':
                if (step) newValue = value - step;
                else newValue = marksValues[marksIndex - 1] || marksValues[0];
                break;
            default:
                return;
        } // Prevent scroll of the page
        event.preventDefault();
        if (step) newValue = $9db9b793df66f12ff7d30a1049548463$var$roundValueToStep(newValue, step, min);
        newValue = $9db9b793df66f12ff7d30a1049548463$var$clamp(newValue, min, max);
        if (range) {
            var previousValue = newValue;
            newValue = $9db9b793df66f12ff7d30a1049548463$var$setValueIndex({
                values: values,
                source: valueDerived,
                newValue: newValue,
                index: index
            }).sort($9db9b793df66f12ff7d30a1049548463$var$asc);
            $9db9b793df66f12ff7d30a1049548463$var$focusThumb({
                sliderRef: sliderRef,
                activeIndex: newValue.indexOf(previousValue)
            });
        }
        setValueState(newValue);
        setFocusVisible(index);
        if (onChange) onChange(event, newValue);
        if (onChangeCommitted) onChangeCommitted(event, newValue);
    });
    var previousIndex = $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$575893c07881cfe8();
    var axis = orientation;
    if (isRtl && orientation !== "vertical") axis += '-reverse';
    var getFingerNewValue = function getFingerNewValue1(_ref3) {
        var finger = _ref3.finger, _ref3$move = _ref3.move, move = _ref3$move === void 0 ? false : _ref3$move, values2 = _ref3.values, source = _ref3.source;
        var slider = sliderRef.current;
        var _slider$getBoundingCl = slider.getBoundingClientRect(), width = _slider$getBoundingCl.width, height = _slider$getBoundingCl.height, bottom = _slider$getBoundingCl.bottom, left = _slider$getBoundingCl.left;
        var percent;
        if (axis.indexOf('vertical') === 0) percent = (bottom - finger.y) / height;
        else percent = (finger.x - left) / width;
        if (axis.indexOf('-reverse') !== -1) percent = 1 - percent;
        var newValue;
        newValue = $9db9b793df66f12ff7d30a1049548463$var$percentToValue(percent, min, max);
        if (step) newValue = $9db9b793df66f12ff7d30a1049548463$var$roundValueToStep(newValue, step, min);
        else {
            var marksValues = marks.map(function(mark) {
                return mark.value;
            });
            var closestIndex = $9db9b793df66f12ff7d30a1049548463$var$findClosest(marksValues, newValue);
            newValue = marksValues[closestIndex];
        }
        newValue = $9db9b793df66f12ff7d30a1049548463$var$clamp(newValue, min, max);
        var activeIndex = 0;
        if (range) {
            if (!move) activeIndex = $9db9b793df66f12ff7d30a1049548463$var$findClosest(values2, newValue);
            else activeIndex = previousIndex.current;
            var previousValue = newValue;
            newValue = $9db9b793df66f12ff7d30a1049548463$var$setValueIndex({
                values: values2,
                source: source,
                newValue: newValue,
                index: activeIndex
            }).sort($9db9b793df66f12ff7d30a1049548463$var$asc);
            activeIndex = newValue.indexOf(previousValue);
            previousIndex.current = activeIndex;
        }
        return {
            newValue: newValue,
            activeIndex: activeIndex
        };
    };
    var handleTouchMove = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        var finger = $9db9b793df66f12ff7d30a1049548463$var$trackFinger(event, touchId);
        if (!finger) return;
        var _getFingerNewValue = getFingerNewValue({
            finger: finger,
            move: true,
            values: values,
            source: valueDerived
        }), newValue = _getFingerNewValue.newValue, activeIndex = _getFingerNewValue.activeIndex;
        $9db9b793df66f12ff7d30a1049548463$var$focusThumb({
            sliderRef: sliderRef,
            activeIndex: activeIndex,
            setActive: setActive
        });
        setValueState(newValue);
        if (onChange) onChange(event, newValue);
    });
    var handleTouchEnd = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        var finger = $9db9b793df66f12ff7d30a1049548463$var$trackFinger(event, touchId);
        if (!finger) return;
        var _getFingerNewValue2 = getFingerNewValue({
            finger: finger,
            values: values,
            source: valueDerived
        }), newValue = _getFingerNewValue2.newValue;
        setActive(-1);
        if (event.type === 'touchend') setOpen(-1);
        if (onChangeCommitted) onChangeCommitted(event, newValue);
        touchId.current = undefined;
        var doc = $9db9b793df66f12ff7d30a1049548463$import$bc270da7a301e7e$9099ad97b570f7c(sliderRef.current);
        doc.removeEventListener('mousemove', handleTouchMove);
        doc.removeEventListener('mouseup', handleTouchEnd);
        doc.removeEventListener('touchmove', handleTouchMove);
        doc.removeEventListener('touchend', handleTouchEnd);
    });
    var handleTouchStart = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        // Workaround as Safari has partial support for touchAction: 'none'.
        event.preventDefault();
        var touch = event.changedTouches[0];
        if (touch != null) // A number that uniquely identifies the current finger in the touch session.
        touchId.current = touch.identifier;
        var finger = $9db9b793df66f12ff7d30a1049548463$var$trackFinger(event, touchId);
        var _getFingerNewValue3 = getFingerNewValue({
            finger: finger,
            values: values,
            source: valueDerived
        }), newValue = _getFingerNewValue3.newValue, activeIndex = _getFingerNewValue3.activeIndex;
        $9db9b793df66f12ff7d30a1049548463$var$focusThumb({
            sliderRef: sliderRef,
            activeIndex: activeIndex,
            setActive: setActive
        });
        setValueState(newValue);
        if (onChange) onChange(event, newValue);
        var doc = $9db9b793df66f12ff7d30a1049548463$import$bc270da7a301e7e$9099ad97b570f7c(sliderRef.current);
        doc.addEventListener('touchmove', handleTouchMove);
        doc.addEventListener('touchend', handleTouchEnd);
    });
    $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        var slider = sliderRef.current;
        slider.addEventListener('touchstart', handleTouchStart);
        var doc = $9db9b793df66f12ff7d30a1049548463$import$bc270da7a301e7e$9099ad97b570f7c(slider);
        return function() {
            slider.removeEventListener('touchstart', handleTouchStart);
            doc.removeEventListener('mousemove', handleTouchMove);
            doc.removeEventListener('mouseup', handleTouchEnd);
            doc.removeEventListener('touchmove', handleTouchMove);
            doc.removeEventListener('touchend', handleTouchEnd);
        };
    }, [
        handleTouchEnd,
        handleTouchMove,
        handleTouchStart
    ]);
    var handleMouseDown = $9db9b793df66f12ff7d30a1049548463$import$3575fe9de66b2ef3$9099ad97b570f7c(function(event) {
        if (onMouseDown) onMouseDown(event);
        event.preventDefault();
        var finger = $9db9b793df66f12ff7d30a1049548463$var$trackFinger(event, touchId);
        var _getFingerNewValue4 = getFingerNewValue({
            finger: finger,
            values: values,
            source: valueDerived
        }), newValue = _getFingerNewValue4.newValue, activeIndex = _getFingerNewValue4.activeIndex;
        $9db9b793df66f12ff7d30a1049548463$var$focusThumb({
            sliderRef: sliderRef,
            activeIndex: activeIndex,
            setActive: setActive
        });
        setValueState(newValue);
        if (onChange) onChange(event, newValue);
        var doc = $9db9b793df66f12ff7d30a1049548463$import$bc270da7a301e7e$9099ad97b570f7c(sliderRef.current);
        doc.addEventListener('mousemove', handleTouchMove);
        doc.addEventListener('mouseup', handleTouchEnd);
    });
    var trackOffset = $9db9b793df66f12ff7d30a1049548463$var$valueToPercent(range ? values[0] : min, min, max);
    var trackLeap = $9db9b793df66f12ff7d30a1049548463$var$valueToPercent(values[values.length - 1], min, max) - trackOffset;
    var trackStyle = $9db9b793df66f12ff7d30a1049548463$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
    }, $9db9b793df66f12ff7d30a1049548463$var$axisProps[axis].offset(trackOffset), $9db9b793df66f12ff7d30a1049548463$var$axisProps[axis].leap(trackLeap));
    return(/*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9(Component, $9db9b793df66f12ff7d30a1049548463$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        ref: handleRef,
        className: $9db9b793df66f12ff7d30a1049548463$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, classes["color".concat($9db9b793df66f12ff7d30a1049548463$import$f35500a7ba1578c4$9099ad97b570f7c(color))], className, disabled && classes.disabled, marks.length > 0 && marks.some(function(mark) {
            return mark.label;
        }) && classes.marked, track === false && classes.trackFalse, orientation === 'vertical' && classes.vertical, track === 'inverted' && classes.trackInverted),
        onMouseDown: handleMouseDown
    }, other), /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9("span", {
        className: classes.rail
    }), /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9("span", {
        className: classes.track,
        style: trackStyle
    }), /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9("input", {
        value: values.join(','),
        name: name,
        type: "hidden"
    }), marks.map(function(mark, index) {
        var percent = $9db9b793df66f12ff7d30a1049548463$var$valueToPercent(mark.value, min, max);
        var style = $9db9b793df66f12ff7d30a1049548463$var$axisProps[axis].offset(percent);
        var markActive;
        if (track === false) markActive = values.indexOf(mark.value) !== -1;
        else markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
        return(/*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9($9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$44f93cb792444969, {
            key: mark.value
        }, /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9("span", {
            style: style,
            "data-index": index,
            className: $9db9b793df66f12ff7d30a1049548463$import$3e54c96927a352a4$9099ad97b570f7c(classes.mark, markActive && classes.markActive)
        }), mark.label != null ? /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9("span", {
            "aria-hidden": true,
            "data-index": index,
            style: style,
            className: $9db9b793df66f12ff7d30a1049548463$import$3e54c96927a352a4$9099ad97b570f7c(classes.markLabel, markActive && classes.markLabelActive)
        }, mark.label) : null));
    }), values.map(function(value, index) {
        var percent = $9db9b793df66f12ff7d30a1049548463$var$valueToPercent(value, min, max);
        var style = $9db9b793df66f12ff7d30a1049548463$var$axisProps[axis].offset(percent);
        return(/*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9(ValueLabelComponent, {
            key: index,
            valueLabelFormat: valueLabelFormat,
            valueLabelDisplay: valueLabelDisplay,
            className: classes.valueLabel,
            value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
            index: index,
            open: open === index || active === index || valueLabelDisplay === 'on',
            disabled: disabled
        }, /*#__PURE__*/ $9db9b793df66f12ff7d30a1049548463$import$f02ba03fc070e88c$2f8418d37d4320b9(ThumbComponent, {
            className: $9db9b793df66f12ff7d30a1049548463$import$3e54c96927a352a4$9099ad97b570f7c(classes.thumb, classes["thumbColor".concat($9db9b793df66f12ff7d30a1049548463$import$f35500a7ba1578c4$9099ad97b570f7c(color))], active === index && classes.active, disabled && classes.disabled, focusVisible === index && classes.focusVisible),
            tabIndex: disabled ? null : 0,
            role: "slider",
            style: style,
            "data-index": index,
            "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
            "aria-labelledby": ariaLabelledby,
            "aria-orientation": orientation,
            "aria-valuemax": scale(max),
            "aria-valuemin": scale(min),
            "aria-valuenow": scale(value),
            "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
            onKeyDown: handleKeyDown,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onMouseOver: handleMouseOver,
            onMouseLeave: handleMouseLeave
        })));
    })));
});
var $9db9b793df66f12ff7d30a1049548463$export$9099ad97b570f7c = $9db9b793df66f12ff7d30a1049548463$import$abdf0c7fda13cc01$9099ad97b570f7c($9db9b793df66f12ff7d30a1049548463$export$1155669653ed4fad, {
    name: 'MuiSlider'
})($9db9b793df66f12ff7d30a1049548463$var$Slider);
