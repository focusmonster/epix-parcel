import   "f1dd87b51120123308807f2cc8190869:@babel/runtime/helpers/esm/extends";
import   "f1dd87b51120123308807f2cc8190869:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "f1dd87b51120123308807f2cc8190869:react";
import   "f1dd87b51120123308807f2cc8190869:prop-types";
import   "f1dd87b51120123308807f2cc8190869:clsx";
import   "f1dd87b51120123308807f2cc8190869:../FormControl/formControlState";
import   "f1dd87b51120123308807f2cc8190869:../FormControl/useFormControl";
import   "f1dd87b51120123308807f2cc8190869:../styles/withStyles";
import   "f1dd87b51120123308807f2cc8190869:../FormLabel";
var $f1dd87b51120123308807f2cc8190869$export$1155669653ed4fad = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            display: 'block',
            transformOrigin: 'top left'
        },
        /* Pseudo-class applied to the root element if `focused={true}`. */ focused: {
        },
        /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {
        },
        /* Pseudo-class applied to the root element if `error={true}`. */ error: {
        },
        /* Pseudo-class applied to the root element if `required={true}`. */ required: {
        },
        /* Pseudo-class applied to the asterisk element. */ asterisk: {
        },
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */ formControl: {
            position: 'absolute',
            left: 0,
            top: 0,
            // slight alteration to spec spacing to match visual spec result
            transform: 'translate(0, 24px) scale(1)'
        },
        /* Styles applied to the root element if `margin="dense"`. */ marginDense: {
            // Compensation for the `Input.inputDense` style.
            transform: 'translate(0, 21px) scale(1)'
        },
        /* Styles applied to the `input` element if `shrink={true}`. */ shrink: {
            transform: 'translate(0, 1.5px) scale(0.75)',
            transformOrigin: 'top left'
        },
        /* Styles applied to the `input` element if `disableAnimation={false}`. */ animated: {
            transition: theme.transitions.create([
                'color',
                'transform'
            ], {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut
            })
        },
        /* Styles applied to the root element if `variant="filled"`. */ filled: {
            // Chrome's autofill feature gives the input field a yellow background.
            // Since the input field is behind the label in the HTML tree,
            // the input field is drawn last and hides the label with an opaque background color.
            // zIndex: 1 will raise the label above opaque background-colors of input.
            zIndex: 1,
            pointerEvents: 'none',
            transform: 'translate(12px, 20px) scale(1)',
            '&$marginDense': {
                transform: 'translate(12px, 17px) scale(1)'
            },
            '&$shrink': {
                transform: 'translate(12px, 10px) scale(0.75)',
                '&$marginDense': {
                    transform: 'translate(12px, 7px) scale(0.75)'
                }
            }
        },
        /* Styles applied to the root element if `variant="outlined"`. */ outlined: {
            // see comment above on filled.zIndex
            zIndex: 1,
            pointerEvents: 'none',
            transform: 'translate(14px, 20px) scale(1)',
            '&$marginDense': {
                transform: 'translate(14px, 12px) scale(1)'
            },
            '&$shrink': {
                transform: 'translate(14px, -6px) scale(0.75)'
            }
        }
    };
};
var $f1dd87b51120123308807f2cc8190869$var$InputLabel = /*#__PURE__*/ $f1dd87b51120123308807f2cc8190869$import$f02ba03fc070e88c$ac92bb288368c37c(function InputLabel(props, ref) {
    var classes = props.classes, className = props.className, _props$disableAnimati = props.disableAnimation, disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati, margin = props.margin, shrinkProp = props.shrink, variant = props.variant, other = $f1dd87b51120123308807f2cc8190869$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "classes",
        "className",
        "disableAnimation",
        "margin",
        "shrink",
        "variant"
    ]);
    var muiFormControl = $f1dd87b51120123308807f2cc8190869$import$d4261346a34c5381$9099ad97b570f7c();
    var shrink = shrinkProp;
    if (typeof shrink === 'undefined' && muiFormControl) shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    var fcs = $f1dd87b51120123308807f2cc8190869$import$9070252bcfb59814$9099ad97b570f7c({
        props: props,
        muiFormControl: muiFormControl,
        states: [
            'margin',
            'variant'
        ]
    });
    return(/*#__PURE__*/ $f1dd87b51120123308807f2cc8190869$import$f02ba03fc070e88c$2f8418d37d4320b9($f1dd87b51120123308807f2cc8190869$import$c912aeae453d8891$9099ad97b570f7c, $f1dd87b51120123308807f2cc8190869$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        "data-shrink": shrink,
        className: $f1dd87b51120123308807f2cc8190869$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {
            'filled': classes.filled,
            'outlined': classes.outlined
        }[fcs.variant]),
        classes: {
            focused: classes.focused,
            disabled: classes.disabled,
            error: classes.error,
            required: classes.required,
            asterisk: classes.asterisk
        },
        ref: ref
    }, other)));
});
var $f1dd87b51120123308807f2cc8190869$export$9099ad97b570f7c = $f1dd87b51120123308807f2cc8190869$import$abdf0c7fda13cc01$9099ad97b570f7c($f1dd87b51120123308807f2cc8190869$export$1155669653ed4fad, {
    name: 'MuiInputLabel'
})($f1dd87b51120123308807f2cc8190869$var$InputLabel);
