import   "af568499c55ac943244d5c38dffd16be:@babel/runtime/helpers/esm/extends";
import   "af568499c55ac943244d5c38dffd16be:tiny-warning";
var $af568499c55ac943244d5c38dffd16be$var$separatorRegExp = /\s*,\s*/g;
var $af568499c55ac943244d5c38dffd16be$var$parentRegExp = /&/g;
var $af568499c55ac943244d5c38dffd16be$var$refRegExp = /\$([\w-]+)/g;
/**
 * Convert nested rules to separate, remove them from original styles.
 */ function $af568499c55ac943244d5c38dffd16be$var$jssNested() {
    // Get a function to be used for $ref replacement.
    function getReplaceRef(container, sheet) {
        return function(match, key) {
            var rule = container.getRule(key) || sheet && sheet.getRule(key);
            if (rule) return rule.selector;
            return key;
        };
    }
    function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split($af568499c55ac943244d5c38dffd16be$var$separatorRegExp);
        var nestedSelectors = nestedProp.split($af568499c55ac943244d5c38dffd16be$var$separatorRegExp);
        var result = '';
        for(var i = 0; i < parentSelectors.length; i++){
            var parent = parentSelectors[i];
            for(var j = 0; j < nestedSelectors.length; j++){
                var nested = nestedSelectors[j];
                if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.
                result += nested.indexOf('&') !== -1 ? nested.replace($af568499c55ac943244d5c38dffd16be$var$parentRegExp, parent) : parent + " " + nested;
            }
        }
        return result;
    }
    function getOptions(rule, container, prevOptions) {
        // Options has been already created, now we only increase index.
        if (prevOptions) return $af568499c55ac943244d5c38dffd16be$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, prevOptions, {
            index: prevOptions.index + 1
        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;
        var options = $af568499c55ac943244d5c38dffd16be$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, rule.options, {
            nestingLevel: nestingLevel,
            index: container.indexOf(rule) + 1
        });
        delete options.name;
        return options;
    }
    function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style') return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;
        for(var prop in style){
            var isNested = prop.indexOf('&') !== -1;
            var isNestedConditional = prop[0] === '@';
            if (!isNested && !isNestedConditional) continue;
            options = getOptions(styleRule, container, options);
            if (isNested) {
                var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
                // all nested rules within the sheet.
                if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.
                selector = selector.replace($af568499c55ac943244d5c38dffd16be$var$refRegExp, replaceRef);
                var name = styleRule.key + "-" + prop;
                if ('replaceRule' in container) // for backward compatibility
                container.replaceRule(name, style[prop], $af568499c55ac943244d5c38dffd16be$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
                }, options, {
                    selector: selector
                }));
                else container.addRule(name, style[prop], $af568499c55ac943244d5c38dffd16be$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
                }, options, {
                    selector: selector
                }));
            } else if (isNestedConditional) // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {
            }, options).addRule(styleRule.key, style[prop], {
                selector: styleRule.selector
            });
            delete style[prop];
        }
        return style;
    }
    return {
        onProcessStyle: onProcessStyle
    };
}
var $af568499c55ac943244d5c38dffd16be$export$9099ad97b570f7c = $af568499c55ac943244d5c38dffd16be$var$jssNested;
