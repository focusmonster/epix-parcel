import   "cc72562325a54a5440f2a8fe09a27dd9:@babel/runtime/helpers/esm/slicedToArray";
import   "cc72562325a54a5440f2a8fe09a27dd9:@babel/runtime/helpers/esm/extends";
import   "cc72562325a54a5440f2a8fe09a27dd9:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "cc72562325a54a5440f2a8fe09a27dd9:react";
import   "cc72562325a54a5440f2a8fe09a27dd9:prop-types";
import   "cc72562325a54a5440f2a8fe09a27dd9:clsx";
import   "cc72562325a54a5440f2a8fe09a27dd9:@material-ui/utils";
import   "cc72562325a54a5440f2a8fe09a27dd9:../styles/withStyles";
import   "cc72562325a54a5440f2a8fe09a27dd9:../utils/capitalize";
var $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_STANDARD = 10;
var $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_DOT = 4;
var $cc72562325a54a5440f2a8fe09a27dd9$export$1155669653ed4fad = function styles(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            position: 'relative',
            display: 'inline-flex',
            // For correct alignment with the text.
            verticalAlign: 'middle',
            flexShrink: 0
        },
        /* Styles applied to the badge `span` element. */ badge: {
            display: 'flex',
            flexDirection: 'row',
            flexWrap: 'wrap',
            justifyContent: 'center',
            alignContent: 'center',
            alignItems: 'center',
            position: 'absolute',
            boxSizing: 'border-box',
            fontFamily: theme.typography.fontFamily,
            fontWeight: theme.typography.fontWeightMedium,
            fontSize: theme.typography.pxToRem(12),
            minWidth: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_STANDARD * 2,
            lineHeight: 1,
            padding: '0 6px',
            height: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_STANDARD * 2,
            borderRadius: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_STANDARD,
            zIndex: 1,
            // Render the badge on top of potential ripples.
            transition: theme.transitions.create('transform', {
                easing: theme.transitions.easing.easeInOut,
                duration: theme.transitions.duration.enteringScreen
            })
        },
        /* Styles applied to the root element if `color="primary"`. */ colorPrimary: {
            backgroundColor: theme.palette.primary.main,
            color: theme.palette.primary.contrastText
        },
        /* Styles applied to the root element if `color="secondary"`. */ colorSecondary: {
            backgroundColor: theme.palette.secondary.main,
            color: theme.palette.secondary.contrastText
        },
        /* Styles applied to the root element if `color="error"`. */ colorError: {
            backgroundColor: theme.palette.error.main,
            color: theme.palette.error.contrastText
        },
        /* Styles applied to the root element if `variant="dot"`. */ dot: {
            borderRadius: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_DOT,
            height: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_DOT * 2,
            minWidth: $cc72562325a54a5440f2a8fe09a27dd9$var$RADIUS_DOT * 2,
            padding: 0
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangle"`. */ anchorOriginTopRightRectangle: {
            top: 0,
            right: 0,
            transform: 'scale(1) translate(50%, -50%)',
            transformOrigin: '100% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangular"`. */ anchorOriginTopRightRectangular: {
            top: 0,
            right: 0,
            transform: 'scale(1) translate(50%, -50%)',
            transformOrigin: '100% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangle"`. */ anchorOriginBottomRightRectangle: {
            bottom: 0,
            right: 0,
            transform: 'scale(1) translate(50%, 50%)',
            transformOrigin: '100% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangular"`. */ anchorOriginBottomRightRectangular: {
            bottom: 0,
            right: 0,
            transform: 'scale(1) translate(50%, 50%)',
            transformOrigin: '100% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangle"`. */ anchorOriginTopLeftRectangle: {
            top: 0,
            left: 0,
            transform: 'scale(1) translate(-50%, -50%)',
            transformOrigin: '0% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangular"`. */ anchorOriginTopLeftRectangular: {
            top: 0,
            left: 0,
            transform: 'scale(1) translate(-50%, -50%)',
            transformOrigin: '0% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangle"`. */ anchorOriginBottomLeftRectangle: {
            bottom: 0,
            left: 0,
            transform: 'scale(1) translate(-50%, 50%)',
            transformOrigin: '0% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangular"`. */ anchorOriginBottomLeftRectangular: {
            bottom: 0,
            left: 0,
            transform: 'scale(1) translate(-50%, 50%)',
            transformOrigin: '0% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circle"`. */ anchorOriginTopRightCircle: {
            top: '14%',
            right: '14%',
            transform: 'scale(1) translate(50%, -50%)',
            transformOrigin: '100% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circular"`. */ anchorOriginTopRightCircular: {
            top: '14%',
            right: '14%',
            transform: 'scale(1) translate(50%, -50%)',
            transformOrigin: '100% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circle"`. */ anchorOriginBottomRightCircle: {
            bottom: '14%',
            right: '14%',
            transform: 'scale(1) translate(50%, 50%)',
            transformOrigin: '100% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circular"`. */ anchorOriginBottomRightCircular: {
            bottom: '14%',
            right: '14%',
            transform: 'scale(1) translate(50%, 50%)',
            transformOrigin: '100% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circle"`. */ anchorOriginTopLeftCircle: {
            top: '14%',
            left: '14%',
            transform: 'scale(1) translate(-50%, -50%)',
            transformOrigin: '0% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circular"`. */ anchorOriginTopLeftCircular: {
            top: '14%',
            left: '14%',
            transform: 'scale(1) translate(-50%, -50%)',
            transformOrigin: '0% 0%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, -50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circle"`. */ anchorOriginBottomLeftCircle: {
            bottom: '14%',
            left: '14%',
            transform: 'scale(1) translate(-50%, 50%)',
            transformOrigin: '0% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, 50%)'
            }
        },
        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circular"`. */ anchorOriginBottomLeftCircular: {
            bottom: '14%',
            left: '14%',
            transform: 'scale(1) translate(-50%, 50%)',
            transformOrigin: '0% 100%',
            '&$invisible': {
                transform: 'scale(0) translate(-50%, 50%)'
            }
        },
        /* Pseudo-class to the badge `span` element if `invisible={true}`. */ invisible: {
            transition: theme.transitions.create('transform', {
                easing: theme.transitions.easing.easeInOut,
                duration: theme.transitions.duration.leavingScreen
            })
        }
    };
};
var $cc72562325a54a5440f2a8fe09a27dd9$var$Badge = /*#__PURE__*/ $cc72562325a54a5440f2a8fe09a27dd9$import$f02ba03fc070e88c$ac92bb288368c37c(function Badge(props, ref) {
    var _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'top',
        horizontal: 'right'
    } : _props$anchorOrigin, badgeContent = props.badgeContent, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'default' : _props$color, _props$component = props.component, ComponentProp = _props$component === void 0 ? 'span' : _props$component, invisibleProp = props.invisible, _props$max = props.max, max = _props$max === void 0 ? 99 : _props$max, _props$overlap = props.overlap, overlap = _props$overlap === void 0 ? 'rectangle' : _props$overlap, _props$showZero = props.showZero, showZero = _props$showZero === void 0 ? false : _props$showZero, _props$variant = props.variant, variant = _props$variant === void 0 ? 'standard' : _props$variant, other = $cc72562325a54a5440f2a8fe09a27dd9$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "anchorOrigin",
        "badgeContent",
        "children",
        "classes",
        "className",
        "color",
        "component",
        "invisible",
        "max",
        "overlap",
        "showZero",
        "variant"
    ]);
    var invisible = invisibleProp;
    if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== 'dot')) invisible = true;
    var displayValue = '';
    if (variant !== 'dot') displayValue = badgeContent > max ? "".concat(max, "+") : badgeContent;
    return(/*#__PURE__*/ $cc72562325a54a5440f2a8fe09a27dd9$import$f02ba03fc070e88c$2f8418d37d4320b9(ComponentProp, $cc72562325a54a5440f2a8fe09a27dd9$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        className: $cc72562325a54a5440f2a8fe09a27dd9$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, className),
        ref: ref
    }, other), children, /*#__PURE__*/ $cc72562325a54a5440f2a8fe09a27dd9$import$f02ba03fc070e88c$2f8418d37d4320b9("span", {
        className: $cc72562325a54a5440f2a8fe09a27dd9$import$3e54c96927a352a4$9099ad97b570f7c(classes.badge, classes["".concat(anchorOrigin.horizontal).concat($cc72562325a54a5440f2a8fe09a27dd9$import$f35500a7ba1578c4$9099ad97b570f7c(anchorOrigin.vertical), "}")], classes["anchorOrigin".concat($cc72562325a54a5440f2a8fe09a27dd9$import$f35500a7ba1578c4$9099ad97b570f7c(anchorOrigin.vertical)).concat($cc72562325a54a5440f2a8fe09a27dd9$import$f35500a7ba1578c4$9099ad97b570f7c(anchorOrigin.horizontal)).concat($cc72562325a54a5440f2a8fe09a27dd9$import$f35500a7ba1578c4$9099ad97b570f7c(overlap))], color !== 'default' && classes["color".concat($cc72562325a54a5440f2a8fe09a27dd9$import$f35500a7ba1578c4$9099ad97b570f7c(color))], invisible && classes.invisible, variant === 'dot' && classes.dot)
    }, displayValue)));
});
var $cc72562325a54a5440f2a8fe09a27dd9$export$9099ad97b570f7c = $cc72562325a54a5440f2a8fe09a27dd9$import$abdf0c7fda13cc01$9099ad97b570f7c($cc72562325a54a5440f2a8fe09a27dd9$export$1155669653ed4fad, {
    name: 'MuiBadge'
})($cc72562325a54a5440f2a8fe09a27dd9$var$Badge);
