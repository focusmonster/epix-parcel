import   "cea69476f5a4b5ea6503206caf46aae1:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "cea69476f5a4b5ea6503206caf46aae1:@babel/runtime/helpers/esm/extends";
import   "cea69476f5a4b5ea6503206caf46aae1:@material-ui/utils";
import   "cea69476f5a4b5ea6503206caf46aae1:react";
import   "cea69476f5a4b5ea6503206caf46aae1:prop-types";
import   "cea69476f5a4b5ea6503206caf46aae1:clsx";
import   "cea69476f5a4b5ea6503206caf46aae1:@material-ui/utils";
import   "cea69476f5a4b5ea6503206caf46aae1:../FormControl/formControlState";
import   "cea69476f5a4b5ea6503206caf46aae1:../FormControl/FormControlContext";
import   "cea69476f5a4b5ea6503206caf46aae1:../styles/withStyles";
import   "cea69476f5a4b5ea6503206caf46aae1:../utils/capitalize";
import   "cea69476f5a4b5ea6503206caf46aae1:../utils/useForkRef";
import   "cea69476f5a4b5ea6503206caf46aae1:../TextareaAutosize";
import   "cea69476f5a4b5ea6503206caf46aae1:./utils";
var $cea69476f5a4b5ea6503206caf46aae1$export$1155669653ed4fad = function styles(theme) {
    var light = theme.palette.type === 'light';
    var placeholder = {
        color: 'currentColor',
        opacity: light ? 0.42 : 0.5,
        transition: theme.transitions.create('opacity', {
            duration: theme.transitions.duration.shorter
        })
    };
    var placeholderHidden = {
        opacity: '0 !important'
    };
    var placeholderVisible = {
        opacity: light ? 0.42 : 0.5
    };
    return {
        '@global': {
            '@keyframes mui-auto-fill': {
            },
            '@keyframes mui-auto-fill-cancel': {
            }
        },
        /* Styles applied to the root element. */ root: $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, theme.typography.body1, {
            color: theme.palette.text.primary,
            lineHeight: '1.1876em',
            // Reset (19px), match the native input line-height
            boxSizing: 'border-box',
            // Prevent padding issue with fullWidth.
            position: 'relative',
            cursor: 'text',
            display: 'inline-flex',
            alignItems: 'center',
            '&$disabled': {
                color: theme.palette.text.disabled,
                cursor: 'default'
            }
        }),
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */ formControl: {
        },
        /* Styles applied to the root element if the component is focused. */ focused: {
        },
        /* Styles applied to the root element if `disabled={true}`. */ disabled: {
        },
        /* Styles applied to the root element if `startAdornment` is provided. */ adornedStart: {
        },
        /* Styles applied to the root element if `endAdornment` is provided. */ adornedEnd: {
        },
        /* Pseudo-class applied to the root element if `error={true}`. */ error: {
        },
        /* Styles applied to the `input` element if `margin="dense"`. */ marginDense: {
        },
        /* Styles applied to the root element if `multiline={true}`. */ multiline: {
            padding: "".concat(6, "px 0 ").concat(7, "px"),
            '&$marginDense': {
                paddingTop: 3
            }
        },
        /* Styles applied to the root element if the color is secondary. */ colorSecondary: {
        },
        /* Styles applied to the root element if `fullWidth={true}`. */ fullWidth: {
            width: '100%'
        },
        /* Styles applied to the `input` element. */ input: {
            font: 'inherit',
            letterSpacing: 'inherit',
            color: 'currentColor',
            padding: "".concat(6, "px 0 ").concat(7, "px"),
            border: 0,
            boxSizing: 'content-box',
            background: 'none',
            height: '1.1876em',
            // Reset (19px), match the native input line-height
            margin: 0,
            // Reset for Safari
            WebkitTapHighlightColor: 'transparent',
            display: 'block',
            // Make the flex item shrink with Firefox
            minWidth: 0,
            width: '100%',
            // Fix IE 11 width issue
            animationName: 'mui-auto-fill-cancel',
            animationDuration: '10ms',
            '&::-webkit-input-placeholder': placeholder,
            '&::-moz-placeholder': placeholder,
            // Firefox 19+
            '&:-ms-input-placeholder': placeholder,
            // IE 11
            '&::-ms-input-placeholder': placeholder,
            // Edge
            '&:focus': {
                outline: 0
            },
            // Reset Firefox invalid required input style
            '&:invalid': {
                boxShadow: 'none'
            },
            '&::-webkit-search-decoration': {
                // Remove the padding when type=search.
                '-webkit-appearance': 'none'
            },
            // Show and hide the placeholder logic
            'label[data-shrink=false] + $formControl &': {
                '&::-webkit-input-placeholder': placeholderHidden,
                '&::-moz-placeholder': placeholderHidden,
                // Firefox 19+
                '&:-ms-input-placeholder': placeholderHidden,
                // IE 11
                '&::-ms-input-placeholder': placeholderHidden,
                // Edge
                '&:focus::-webkit-input-placeholder': placeholderVisible,
                '&:focus::-moz-placeholder': placeholderVisible,
                // Firefox 19+
                '&:focus:-ms-input-placeholder': placeholderVisible,
                // IE 11
                '&:focus::-ms-input-placeholder': placeholderVisible
            },
            '&$disabled': {
                opacity: 1
            },
            '&:-webkit-autofill': {
                animationDuration: '5000s',
                animationName: 'mui-auto-fill'
            }
        },
        /* Styles applied to the `input` element if `margin="dense"`. */ inputMarginDense: {
            paddingTop: 3
        },
        /* Styles applied to the `input` element if `multiline={true}`. */ inputMultiline: {
            height: 'auto',
            resize: 'none',
            padding: 0
        },
        /* Styles applied to the `input` element if `type="search"`. */ inputTypeSearch: {
            // Improve type search style.
            '-moz-appearance': 'textfield',
            '-webkit-appearance': 'textfield'
        },
        /* Styles applied to the `input` element if `startAdornment` is provided. */ inputAdornedStart: {
        },
        /* Styles applied to the `input` element if `endAdornment` is provided. */ inputAdornedEnd: {
        },
        /* Styles applied to the `input` element if `hiddenLabel={true}`. */ inputHiddenLabel: {
        }
    };
};
var $cea69476f5a4b5ea6503206caf46aae1$var$useEnhancedEffect = typeof window === 'undefined' ? $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$7e977b4ca969aabd : $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$3839ad89c0ec6b31;
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */ var $cea69476f5a4b5ea6503206caf46aae1$var$InputBase = /*#__PURE__*/ $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$ac92bb288368c37c(function InputBase(props, ref) {
    var ariaDescribedby = props['aria-describedby'], autoComplete = props.autoComplete, autoFocus = props.autoFocus, classes = props.classes, className = props.className, color = props.color, defaultValue = props.defaultValue, disabled = props.disabled, endAdornment = props.endAdornment, error = props.error, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, id = props.id, _props$inputComponent = props.inputComponent, inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent, _props$inputProps = props.inputProps, inputPropsProp = _props$inputProps === void 0 ? {
    } : _props$inputProps, inputRefProp = props.inputRef, margin = props.margin, _props$multiline = props.multiline, multiline = _props$multiline === void 0 ? false : _props$multiline, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, onKeyDown = props.onKeyDown, onKeyUp = props.onKeyUp, placeholder = props.placeholder, readOnly = props.readOnly, renderSuffix = props.renderSuffix, rows = props.rows, rowsMax = props.rowsMax, rowsMin = props.rowsMin, maxRows = props.maxRows, minRows = props.minRows, startAdornment = props.startAdornment, _props$type = props.type, type = _props$type === void 0 ? 'text' : _props$type, valueProp = props.value, other = $cea69476f5a4b5ea6503206caf46aae1$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "aria-describedby",
        "autoComplete",
        "autoFocus",
        "classes",
        "className",
        "color",
        "defaultValue",
        "disabled",
        "endAdornment",
        "error",
        "fullWidth",
        "id",
        "inputComponent",
        "inputProps",
        "inputRef",
        "margin",
        "multiline",
        "name",
        "onBlur",
        "onChange",
        "onClick",
        "onFocus",
        "onKeyDown",
        "onKeyUp",
        "placeholder",
        "readOnly",
        "renderSuffix",
        "rows",
        "rowsMax",
        "rowsMin",
        "maxRows",
        "minRows",
        "startAdornment",
        "type",
        "value"
    ]);
    var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    var _React$useRef = $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$575893c07881cfe8(value != null), isControlled = _React$useRef.current;
    var inputRef = $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$575893c07881cfe8();
    var handleInputRefWarning = $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$e04575e0186a275b(function(instance) {
    }, []);
    var handleInputPropsRefProp = $cea69476f5a4b5ea6503206caf46aae1$import$f0ac2eb29a789ac2$9099ad97b570f7c(inputPropsProp.ref, handleInputRefWarning);
    var handleInputRefProp = $cea69476f5a4b5ea6503206caf46aae1$import$f0ac2eb29a789ac2$9099ad97b570f7c(inputRefProp, handleInputPropsRefProp);
    var handleInputRef = $cea69476f5a4b5ea6503206caf46aae1$import$f0ac2eb29a789ac2$9099ad97b570f7c(inputRef, handleInputRefProp);
    var _React$useState = $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$f54936751fc2c51(false), focused = _React$useState[0], setFocused = _React$useState[1];
    var muiFormControl = $cea69476f5a4b5ea6503206caf46aae1$import$abc9826f04991d65$b1f65b92be1a279b();
    var fcs = $cea69476f5a4b5ea6503206caf46aae1$import$9070252bcfb59814$9099ad97b570f7c({
        props: props,
        muiFormControl: muiFormControl,
        states: [
            'color',
            'disabled',
            'error',
            'hiddenLabel',
            'margin',
            'required',
            'filled'
        ]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.
    $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (!muiFormControl && disabled && focused) {
            setFocused(false);
            if (onBlur) onBlur();
        }
    }, [
        muiFormControl,
        disabled,
        focused,
        onBlur
    ]);
    var onFilled = muiFormControl && muiFormControl.onFilled;
    var onEmpty = muiFormControl && muiFormControl.onEmpty;
    var checkDirty = $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$e04575e0186a275b(function(obj) {
        if ($cea69476f5a4b5ea6503206caf46aae1$import$4b1ea399deea6e65$3a41dc00de3cc907(obj)) {
            if (onFilled) onFilled();
        } else if (onEmpty) onEmpty();
    }, [
        onFilled,
        onEmpty
    ]);
    $cea69476f5a4b5ea6503206caf46aae1$var$useEnhancedEffect(function() {
        if (isControlled) checkDirty({
            value: value
        });
    }, [
        value,
        checkDirty,
        isControlled
    ]);
    var handleFocus = function handleFocus1(event) {
        // Fix a bug with IE 11 where the focus/blur events are triggered
        // while the input is disabled.
        if (fcs.disabled) {
            event.stopPropagation();
            return;
        }
        if (onFocus) onFocus(event);
        if (inputPropsProp.onFocus) inputPropsProp.onFocus(event);
        if (muiFormControl && muiFormControl.onFocus) muiFormControl.onFocus(event);
        else setFocused(true);
    };
    var handleBlur = function handleBlur1(event) {
        if (onBlur) onBlur(event);
        if (inputPropsProp.onBlur) inputPropsProp.onBlur(event);
        if (muiFormControl && muiFormControl.onBlur) muiFormControl.onBlur(event);
        else setFocused(false);
    };
    var handleChange = function handleChange1(event) {
        if (!isControlled) {
            var element = event.target || inputRef.current;
            if (element == null) throw new Error($cea69476f5a4b5ea6503206caf46aae1$import$4ddfa5b020de25c6$8144764b12c0d2ad(1));
            checkDirty({
                value: element.value
            });
        }
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        if (inputPropsProp.onChange) inputPropsProp.onChange.apply(inputPropsProp, [
            event
        ].concat(args));
         // Perform in the willUpdate
        if (onChange) onChange.apply(void 0, [
            event
        ].concat(args));
    }; // Check the input state on mount, in case it was filled by the user
    // or auto filled by the browser before the hydration (for SSR).
    $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        checkDirty(inputRef.current);
    }, []); // eslint-disable-line react-hooks/exhaustive-deps
    var handleClick = function handleClick1(event) {
        if (inputRef.current && event.currentTarget === event.target) inputRef.current.focus();
        if (onClick) onClick(event);
    };
    var InputComponent = inputComponent;
    var inputProps = $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
    }, inputPropsProp, {
        ref: handleInputRef
    });
    if (typeof InputComponent !== 'string') inputProps = $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        // Rename ref to inputRef as we don't know the
        // provided `inputComponent` structure.
        inputRef: handleInputRef,
        type: type
    }, inputProps, {
        ref: null
    });
    else if (multiline) {
        if (rows && !maxRows && !minRows && !rowsMax && !rowsMin) InputComponent = 'textarea';
        else {
            inputProps = $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
                minRows: rows || minRows,
                rowsMax: rowsMax,
                maxRows: maxRows
            }, inputProps);
            InputComponent = $cea69476f5a4b5ea6503206caf46aae1$import$1762456bf0e76c58$9099ad97b570f7c;
        }
    } else inputProps = $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        type: type
    }, inputProps);
    var handleAutoFill = function handleAutoFill1(event) {
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
            value: 'x'
        });
    };
    $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (muiFormControl) muiFormControl.setAdornedStart(Boolean(startAdornment));
    }, [
        muiFormControl,
        startAdornment
    ]);
    return(/*#__PURE__*/ $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$2f8418d37d4320b9("div", $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        className: $cea69476f5a4b5ea6503206caf46aae1$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, classes["color".concat($cea69476f5a4b5ea6503206caf46aae1$import$f35500a7ba1578c4$9099ad97b570f7c(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
        onClick: handleClick,
        ref: ref
    }, other), startAdornment, /*#__PURE__*/ $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$2f8418d37d4320b9($cea69476f5a4b5ea6503206caf46aae1$import$abc9826f04991d65$9099ad97b570f7c.Provider, {
        value: null
    }, /*#__PURE__*/ $cea69476f5a4b5ea6503206caf46aae1$import$f02ba03fc070e88c$2f8418d37d4320b9(InputComponent, $cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        "aria-invalid": fcs.error,
        "aria-describedby": ariaDescribedby,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: fcs.disabled,
        id: id,
        onAnimationStart: handleAutoFill,
        name: name,
        placeholder: placeholder,
        readOnly: readOnly,
        required: fcs.required,
        rows: rows,
        value: value,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp
    }, inputProps, {
        className: $cea69476f5a4b5ea6503206caf46aae1$import$3e54c96927a352a4$9099ad97b570f7c(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: handleFocus
    }))), endAdornment, renderSuffix ? renderSuffix($cea69476f5a4b5ea6503206caf46aae1$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
    }, fcs, {
        startAdornment: startAdornment
    })) : null));
});
var $cea69476f5a4b5ea6503206caf46aae1$export$9099ad97b570f7c = $cea69476f5a4b5ea6503206caf46aae1$import$abdf0c7fda13cc01$9099ad97b570f7c($cea69476f5a4b5ea6503206caf46aae1$export$1155669653ed4fad, {
    name: 'MuiInputBase'
})($cea69476f5a4b5ea6503206caf46aae1$var$InputBase);
