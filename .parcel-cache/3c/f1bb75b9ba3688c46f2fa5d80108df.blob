import   "959d824db9455d2269684cfa51f53dfe:@babel/runtime/helpers/esm/extends";
import   "959d824db9455d2269684cfa51f53dfe:@material-ui/utils";
import   "959d824db9455d2269684cfa51f53dfe:./cssUtils";
function $959d824db9455d2269684cfa51f53dfe$export$9099ad97b570f7c(themeInput) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    var _options$breakpoints = options.breakpoints, breakpoints = _options$breakpoints === void 0 ? [
        'sm',
        'md',
        'lg'
    ] : _options$breakpoints, _options$disableAlign = options.disableAlign, disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign, _options$factor = options.factor, factor = _options$factor === void 0 ? 2 : _options$factor, _options$variants = options.variants, variants = _options$variants === void 0 ? [
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'subtitle1',
        'subtitle2',
        'body1',
        'body2',
        'caption',
        'button',
        'overline'
    ] : _options$variants;
    var theme = $959d824db9455d2269684cfa51f53dfe$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
    }, themeInput);
    theme.typography = $959d824db9455d2269684cfa51f53dfe$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
    }, theme.typography);
    var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
    // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
    var convert = $959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$89c2cc3b6c94cff3(typography.htmlFontSize);
    var breakpointValues = breakpoints.map(function(x) {
        return theme.breakpoints.values[x];
    });
    variants.forEach(function(variant) {
        var style = typography[variant];
        var remFontSize = parseFloat(convert(style.fontSize, 'rem'));
        if (remFontSize <= 1) return;
        var maxFontSize = remFontSize;
        var minFontSize = 1 + (maxFontSize - 1) / factor;
        var lineHeight = style.lineHeight;
        if (!$959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$48b75708c8c75cd3(lineHeight) && !disableAlign) throw new Error($959d824db9455d2269684cfa51f53dfe$import$4ddfa5b020de25c6$8144764b12c0d2ad(6));
        if (!$959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$48b75708c8c75cd3(lineHeight)) // make it unitless
        lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
        var transform = null;
        if (!disableAlign) transform = function transform1(value) {
            return $959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$28b4aad4c6692e8a({
                size: value,
                grid: $959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$c351fe1c64b834a({
                    pixels: 4,
                    lineHeight: lineHeight,
                    htmlFontSize: typography.htmlFontSize
                })
            });
        };
        typography[variant] = $959d824db9455d2269684cfa51f53dfe$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, style, $959d824db9455d2269684cfa51f53dfe$import$eb3d3260b490072f$154f79b3783f9957({
            cssProperty: 'fontSize',
            min: minFontSize,
            max: maxFontSize,
            unit: 'rem',
            breakpoints: breakpointValues,
            transform: transform
        }));
    });
    return theme;
}
