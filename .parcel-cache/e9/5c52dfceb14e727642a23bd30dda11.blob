import   "80f3d4770f759173513b63e144ea841a:prop-types";
import   "80f3d4770f759173513b63e144ea841a:@material-ui/utils";
import   "80f3d4770f759173513b63e144ea841a:../withWidth";
import   "80f3d4770f759173513b63e144ea841a:../styles/useTheme";
/**
 * @ignore - internal component.
 */ function $80f3d4770f759173513b63e144ea841a$var$HiddenJs(props) {
    var children = props.children, only = props.only, width = props.width;
    var theme = $80f3d4770f759173513b63e144ea841a$import$d08d112fbc8a4e1d$9099ad97b570f7c();
    var visible = true; // `only` check is faster to get out sooner if used.
    if (only) {
        if (Array.isArray(only)) for(var i = 0; i < only.length; i += 1){
            var breakpoint = only[i];
            if (width === breakpoint) {
                visible = false;
                break;
            }
        }
        else if (only && width === only) visible = false;
    } // Allow `only` to be combined with other props. If already hidden, no need to check others.
    if (visible) // determine visibility based on the smallest size up
    for(var _i = 0; _i < theme.breakpoints.keys.length; _i += 1){
        var _breakpoint = theme.breakpoints.keys[_i];
        var breakpointUp = props["".concat(_breakpoint, "Up")];
        var breakpointDown = props["".concat(_breakpoint, "Down")];
        if (breakpointUp && $80f3d4770f759173513b63e144ea841a$import$b1155f2f2a49d5e3$c1bc709d5e3c8c(_breakpoint, width) || breakpointDown && $80f3d4770f759173513b63e144ea841a$import$b1155f2f2a49d5e3$ab9235f40f51bb35(_breakpoint, width)) {
            visible = false;
            break;
        }
    }
    if (!visible) return null;
    return children;
}
$80f3d4770f759173513b63e144ea841a$var$HiddenJs.propTypes = {
    /**
   * The content of the component.
   */ children: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.node,
    /**
   * @ignore
   */ className: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.string,
    /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */ implementation: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.oneOf([
        'js',
        'css'
    ]),
    /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use an heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */ initialWidth: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.oneOf([
        'xs',
        'sm',
        'md',
        'lg',
        'xl'
    ]),
    /**
   * If `true`, screens this size and down will be hidden.
   */ lgDown: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ lgUp: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and down will be hidden.
   */ mdDown: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ mdUp: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * Hide the given breakpoint(s).
   */ only: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.oneOfType([
        $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl'
        ]),
        $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.arrayOf($80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl'
        ]))
    ]),
    /**
   * If `true`, screens this size and down will be hidden.
   */ smDown: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ smUp: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * @ignore
   * width prop provided by withWidth decorator.
   */ width: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.string.isRequired,
    /**
   * If `true`, screens this size and down will be hidden.
   */ xlDown: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ xlUp: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and down will be hidden.
   */ xsDown: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ xsUp: $80f3d4770f759173513b63e144ea841a$import$67a8cc6ac06859d5$9099ad97b570f7c.bool
};
var $80f3d4770f759173513b63e144ea841a$export$9099ad97b570f7c = $80f3d4770f759173513b63e144ea841a$import$b1155f2f2a49d5e3$9099ad97b570f7c()($80f3d4770f759173513b63e144ea841a$var$HiddenJs);
