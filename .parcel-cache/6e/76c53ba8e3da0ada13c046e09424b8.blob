import   "8f2cacab6eb4445829f860384d51b565:@babel/runtime/helpers/esm/extends";
import   "8f2cacab6eb4445829f860384d51b565:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "8f2cacab6eb4445829f860384d51b565:react";
import   "8f2cacab6eb4445829f860384d51b565:prop-types";
import   "8f2cacab6eb4445829f860384d51b565:react-dom";
import   "8f2cacab6eb4445829f860384d51b565:@material-ui/utils";
import   "8f2cacab6eb4445829f860384d51b565:../utils/debounce";
import   "8f2cacab6eb4445829f860384d51b565:clsx";
import   "8f2cacab6eb4445829f860384d51b565:../utils/ownerDocument";
import   "8f2cacab6eb4445829f860384d51b565:../utils/ownerWindow";
import   "8f2cacab6eb4445829f860384d51b565:../utils/createChainedFunction";
import   "8f2cacab6eb4445829f860384d51b565:../utils/deprecatedPropType";
import   "8f2cacab6eb4445829f860384d51b565:../styles/withStyles";
import   "8f2cacab6eb4445829f860384d51b565:../Modal";
import   "8f2cacab6eb4445829f860384d51b565:../Grow";
import   "8f2cacab6eb4445829f860384d51b565:../Paper";
function $8f2cacab6eb4445829f860384d51b565$export$4de912898aeaac3(rect, vertical) {
    var offset = 0;
    if (typeof vertical === 'number') offset = vertical;
    else if (vertical === 'center') offset = rect.height / 2;
    else if (vertical === 'bottom') offset = rect.height;
    return offset;
}
function $8f2cacab6eb4445829f860384d51b565$export$bd4ecaa3ccbe4533(rect, horizontal) {
    var offset = 0;
    if (typeof horizontal === 'number') offset = horizontal;
    else if (horizontal === 'center') offset = rect.width / 2;
    else if (horizontal === 'right') offset = rect.width;
    return offset;
}
function $8f2cacab6eb4445829f860384d51b565$var$getTransformOriginValue(transformOrigin) {
    return [
        transformOrigin.horizontal,
        transformOrigin.vertical
    ].map(function(n) {
        return typeof n === 'number' ? "".concat(n, "px") : n;
    }).join(' ');
} // Sum the scrollTop between two elements.
function $8f2cacab6eb4445829f860384d51b565$var$getScrollParent(parent, child) {
    var element = child;
    var scrollTop = 0;
    while(element && element !== parent){
        element = element.parentElement;
        scrollTop += element.scrollTop;
    }
    return scrollTop;
}
function $8f2cacab6eb4445829f860384d51b565$var$getAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}
var $8f2cacab6eb4445829f860384d51b565$export$1155669653ed4fad = {
    /* Styles applied to the root element. */ root: {
    },
    /* Styles applied to the `Paper` component. */ paper: {
        position: 'absolute',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        // It's most likely on issue on userland.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
    }
};
var $8f2cacab6eb4445829f860384d51b565$var$Popover = /*#__PURE__*/ $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$ac92bb288368c37c(function Popover(props, ref) {
    var action = props.action, anchorEl = props.anchorEl, _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
    } : _props$anchorOrigin, anchorPosition = props.anchorPosition, _props$anchorReferenc = props.anchorReference, anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc, children = props.children, classes = props.classes, className = props.className, containerProp = props.container, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 8 : _props$elevation, getContentAnchorEl = props.getContentAnchorEl, _props$marginThreshol = props.marginThreshold, marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {
    } : _props$PaperProps, _props$transformOrigi = props.transformOrigin, transformOrigin = _props$transformOrigi === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
    } : _props$transformOrigi, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? $8f2cacab6eb4445829f860384d51b565$import$63e770bca2207d09$9099ad97b570f7c : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura, _props$TransitionProp = props.TransitionProps, TransitionProps = _props$TransitionProp === void 0 ? {
    } : _props$TransitionProp, other = $8f2cacab6eb4445829f860384d51b565$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "action",
        "anchorEl",
        "anchorOrigin",
        "anchorPosition",
        "anchorReference",
        "children",
        "classes",
        "className",
        "container",
        "elevation",
        "getContentAnchorEl",
        "marginThreshold",
        "onEnter",
        "onEntered",
        "onEntering",
        "onExit",
        "onExited",
        "onExiting",
        "open",
        "PaperProps",
        "transformOrigin",
        "TransitionComponent",
        "transitionDuration",
        "TransitionProps"
    ]);
    var paperRef = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$575893c07881cfe8(); // Returns the top/left offset of the position
    // to attach to on the anchor element (or body if none is provided)
    var getAnchorOffset = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function(contentAnchorOffset) {
        if (anchorReference === 'anchorPosition') return anchorPosition;
        var resolvedAnchorEl = $8f2cacab6eb4445829f860384d51b565$var$getAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover
        var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : $8f2cacab6eb4445829f860384d51b565$import$bc270da7a301e7e$9099ad97b570f7c(paperRef.current).body;
        var anchorRect = anchorElement.getBoundingClientRect();
        var box;
        var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
        return {
            top: anchorRect.top + $8f2cacab6eb4445829f860384d51b565$export$4de912898aeaac3(anchorRect, anchorVertical),
            left: anchorRect.left + $8f2cacab6eb4445829f860384d51b565$export$bd4ecaa3ccbe4533(anchorRect, anchorOrigin.horizontal)
        };
    }, [
        anchorEl,
        anchorOrigin.horizontal,
        anchorOrigin.vertical,
        anchorPosition,
        anchorReference
    ]); // Returns the vertical offset of inner content to anchor the transform on if provided
    var getContentAnchorOffset = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function(element) {
        var contentAnchorOffset = 0;
        if (getContentAnchorEl && anchorReference === 'anchorEl') {
            var contentAnchorEl = getContentAnchorEl(element);
            if (contentAnchorEl && element.contains(contentAnchorEl)) {
                var scrollTop = $8f2cacab6eb4445829f860384d51b565$var$getScrollParent(element, contentAnchorEl);
                contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
            } // != the default value
        }
        return contentAnchorOffset;
    }, [
        anchorOrigin.vertical,
        anchorReference,
        getContentAnchorEl
    ]); // Return the base transform origin using the element
    // and taking the content anchor offset into account if in use
    var getTransformOrigin = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function(elemRect) {
        var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return {
            vertical: $8f2cacab6eb4445829f860384d51b565$export$4de912898aeaac3(elemRect, transformOrigin.vertical) + contentAnchorOffset,
            horizontal: $8f2cacab6eb4445829f860384d51b565$export$bd4ecaa3ccbe4533(elemRect, transformOrigin.horizontal)
        };
    }, [
        transformOrigin.horizontal,
        transformOrigin.vertical
    ]);
    var getPositioningStyle = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function(element) {
        // Check if the parent has requested anchoring on an inner content node
        var contentAnchorOffset = getContentAnchorOffset(element);
        var elemRect = {
            width: element.offsetWidth,
            height: element.offsetHeight
        }; // Get the transform origin point on the element itself
        var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);
        if (anchorReference === 'none') return {
            top: null,
            left: null,
            transformOrigin: $8f2cacab6eb4445829f860384d51b565$var$getTransformOriginValue(elemTransformOrigin)
        };
         // Get the offset of of the anchoring element
        var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning
        var top = anchorOffset.top - elemTransformOrigin.vertical;
        var left = anchorOffset.left - elemTransformOrigin.horizontal;
        var bottom = top + elemRect.height;
        var right = left + elemRect.width; // Use the parent window of the anchorEl if provided
        var containerWindow = $8f2cacab6eb4445829f860384d51b565$import$556b2e6b7545616a$9099ad97b570f7c($8f2cacab6eb4445829f860384d51b565$var$getAnchorEl(anchorEl)); // Window thresholds taking required margin into account
        var heightThreshold = containerWindow.innerHeight - marginThreshold;
        var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting
        if (top < marginThreshold) {
            var diff = top - marginThreshold;
            top -= diff;
            elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
            var _diff = bottom - heightThreshold;
            top -= _diff;
            elemTransformOrigin.vertical += _diff;
        }
        if (left < marginThreshold) {
            var _diff2 = left - marginThreshold;
            left -= _diff2;
            elemTransformOrigin.horizontal += _diff2;
        } else if (right > widthThreshold) {
            var _diff3 = right - widthThreshold;
            left -= _diff3;
            elemTransformOrigin.horizontal += _diff3;
        }
        return {
            top: "".concat(Math.round(top), "px"),
            left: "".concat(Math.round(left), "px"),
            transformOrigin: $8f2cacab6eb4445829f860384d51b565$var$getTransformOriginValue(elemTransformOrigin)
        };
    }, [
        anchorEl,
        anchorReference,
        getAnchorOffset,
        getContentAnchorOffset,
        getTransformOrigin,
        marginThreshold
    ]);
    var setPositioningStyles = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function() {
        var element = paperRef.current;
        if (!element) return;
        var positioning = getPositioningStyle(element);
        if (positioning.top !== null) element.style.top = positioning.top;
        if (positioning.left !== null) element.style.left = positioning.left;
        element.style.transformOrigin = positioning.transformOrigin;
    }, [
        getPositioningStyle
    ]);
    var handleEntering = function handleEntering1(element, isAppearing) {
        if (onEntering) onEntering(element, isAppearing);
        setPositioningStyles();
    };
    var handlePaperRef = $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$e04575e0186a275b(function(instance) {
        // #StrictMode ready
        paperRef.current = $8f2cacab6eb4445829f860384d51b565$import$9c1aa63963514e3e$1817be7fffc127f2(instance);
    }, []);
    $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (open) setPositioningStyles();
    });
    $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$718bc1f42abf35a1(action, function() {
        return open ? {
            updatePosition: function updatePosition() {
                setPositioningStyles();
            }
        } : null;
    }, [
        open,
        setPositioningStyles
    ]);
    $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (!open) return undefined;
        var handleResize = $8f2cacab6eb4445829f860384d51b565$import$823313fd4db85d55$9099ad97b570f7c(function() {
            setPositioningStyles();
        });
        window.addEventListener('resize', handleResize);
        return function() {
            handleResize.clear();
            window.removeEventListener('resize', handleResize);
        };
    }, [
        open,
        setPositioningStyles
    ]);
    var transitionDuration = transitionDurationProp;
    if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) transitionDuration = undefined;
     // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container
    var container = containerProp || (anchorEl ? $8f2cacab6eb4445829f860384d51b565$import$bc270da7a301e7e$9099ad97b570f7c($8f2cacab6eb4445829f860384d51b565$var$getAnchorEl(anchorEl)).body : undefined);
    return(/*#__PURE__*/ $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$2f8418d37d4320b9($8f2cacab6eb4445829f860384d51b565$import$9a6e4303ec08c8ae$9099ad97b570f7c, $8f2cacab6eb4445829f860384d51b565$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        container: container,
        open: open,
        ref: ref,
        BackdropProps: {
            invisible: true
        },
        className: $8f2cacab6eb4445829f860384d51b565$import$3e54c96927a352a4$9099ad97b570f7c(classes.root, className)
    }, other), /*#__PURE__*/ $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$2f8418d37d4320b9(TransitionComponent, $8f2cacab6eb4445829f860384d51b565$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        appear: true,
        in: open,
        onEnter: onEnter,
        onEntered: onEntered,
        onExit: onExit,
        onExited: onExited,
        onExiting: onExiting,
        timeout: transitionDuration
    }, TransitionProps, {
        onEntering: $8f2cacab6eb4445829f860384d51b565$import$4d0c183b9bc5b43b$9099ad97b570f7c(handleEntering, TransitionProps.onEntering)
    }), /*#__PURE__*/ $8f2cacab6eb4445829f860384d51b565$import$f02ba03fc070e88c$2f8418d37d4320b9($8f2cacab6eb4445829f860384d51b565$import$881d8cc84965099$9099ad97b570f7c, $8f2cacab6eb4445829f860384d51b565$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        elevation: elevation,
        ref: handlePaperRef
    }, PaperProps, {
        className: $8f2cacab6eb4445829f860384d51b565$import$3e54c96927a352a4$9099ad97b570f7c(classes.paper, PaperProps.className)
    }), children))));
});
var $8f2cacab6eb4445829f860384d51b565$export$9099ad97b570f7c = $8f2cacab6eb4445829f860384d51b565$import$abdf0c7fda13cc01$9099ad97b570f7c($8f2cacab6eb4445829f860384d51b565$export$1155669653ed4fad, {
    name: 'MuiPopover'
})($8f2cacab6eb4445829f860384d51b565$var$Popover);
