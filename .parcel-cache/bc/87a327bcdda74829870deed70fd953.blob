import   "882f21053ba9c33f8b6e47510e203cfd:@babel/runtime/helpers/esm/extends";
import   "882f21053ba9c33f8b6e47510e203cfd:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "882f21053ba9c33f8b6e47510e203cfd:react";
import   "882f21053ba9c33f8b6e47510e203cfd:prop-types";
import   "882f21053ba9c33f8b6e47510e203cfd:../utils/debounce";
import   "882f21053ba9c33f8b6e47510e203cfd:../utils/useForkRef";
import   "882f21053ba9c33f8b6e47510e203cfd:../utils/deprecatedPropType";
function $882f21053ba9c33f8b6e47510e203cfd$var$getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
}
var $882f21053ba9c33f8b6e47510e203cfd$var$useEnhancedEffect = typeof window !== 'undefined' ? $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$3839ad89c0ec6b31 : $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$7e977b4ca969aabd;
var $882f21053ba9c33f8b6e47510e203cfd$var$styles = {
    /* Styles applied to the shadow textarea element. */ shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
    }
};
var $882f21053ba9c33f8b6e47510e203cfd$var$TextareaAutosize = /*#__PURE__*/ $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$ac92bb288368c37c(function TextareaAutosize(props, ref) {
    var onChange = props.onChange, rows = props.rows, rowsMax = props.rowsMax, rowsMinProp = props.rowsMin, maxRowsProp = props.maxRows, _props$minRows = props.minRows, minRowsProp = _props$minRows === void 0 ? 1 : _props$minRows, style = props.style, value = props.value, other = $882f21053ba9c33f8b6e47510e203cfd$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "onChange",
        "rows",
        "rowsMax",
        "rowsMin",
        "maxRows",
        "minRows",
        "style",
        "value"
    ]);
    var maxRows = maxRowsProp || rowsMax;
    var minRows = rows || rowsMinProp || minRowsProp;
    var _React$useRef = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$575893c07881cfe8(value != null), isControlled = _React$useRef.current;
    var inputRef = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var handleRef = $882f21053ba9c33f8b6e47510e203cfd$import$f0ac2eb29a789ac2$9099ad97b570f7c(ref, inputRef);
    var shadowRef = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var renders = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$575893c07881cfe8(0);
    var _React$useState = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$f54936751fc2c51({
    }), state = _React$useState[0], setState = _React$useState[1];
    var syncHeight = $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$e04575e0186a275b(function() {
        var input = inputRef.current;
        var computedStyle = window.getComputedStyle(input);
        var inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';
        if (inputShallow.value.slice(-1) === '\n') // Certain fonts which overflow the line height will cause the textarea
        // to report a different scrollHeight depending on whether the last line
        // is empty. Make it non-empty to avoid this issue.
        inputShallow.value += ' ';
        var boxSizing = computedStyle['box-sizing'];
        var padding = $882f21053ba9c33f8b6e47510e203cfd$var$getStyleValue(computedStyle, 'padding-bottom') + $882f21053ba9c33f8b6e47510e203cfd$var$getStyleValue(computedStyle, 'padding-top');
        var border = $882f21053ba9c33f8b6e47510e203cfd$var$getStyleValue(computedStyle, 'border-bottom-width') + $882f21053ba9c33f8b6e47510e203cfd$var$getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content
        var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row
        inputShallow.value = 'x';
        var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content
        var outerHeight = innerHeight;
        if (minRows) outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        if (maxRows) outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.
        var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        var overflow = Math.abs(outerHeight - innerHeight) <= 1;
        setState(function(prevState) {
            // Need a large enough difference to update the height.
            // This prevents infinite rendering loop.
            if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
                renders.current += 1;
                return {
                    overflow: overflow,
                    outerHeightStyle: outerHeightStyle
                };
            }
            return prevState;
        });
    }, [
        maxRows,
        minRows,
        props.placeholder
    ]);
    $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        var handleResize = $882f21053ba9c33f8b6e47510e203cfd$import$823313fd4db85d55$9099ad97b570f7c(function() {
            renders.current = 0;
            syncHeight();
        });
        window.addEventListener('resize', handleResize);
        return function() {
            handleResize.clear();
            window.removeEventListener('resize', handleResize);
        };
    }, [
        syncHeight
    ]);
    $882f21053ba9c33f8b6e47510e203cfd$var$useEnhancedEffect(function() {
        syncHeight();
    });
    $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        renders.current = 0;
    }, [
        value
    ]);
    var handleChange = function handleChange1(event) {
        renders.current = 0;
        if (!isControlled) syncHeight();
        if (onChange) onChange(event);
    };
    return(/*#__PURE__*/ $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$2f8418d37d4320b9($882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$44f93cb792444969, null, /*#__PURE__*/ $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$2f8418d37d4320b9("textarea", $882f21053ba9c33f8b6e47510e203cfd$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        value: value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: $882f21053ba9c33f8b6e47510e203cfd$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
            height: state.outerHeightStyle,
            // Need a large enough difference to allow scrolling.
            // This prevents infinite rendering loop.
            overflow: state.overflow ? 'hidden' : null
        }, style)
    }, other)), /*#__PURE__*/ $882f21053ba9c33f8b6e47510e203cfd$import$f02ba03fc070e88c$2f8418d37d4320b9("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: $882f21053ba9c33f8b6e47510e203cfd$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, $882f21053ba9c33f8b6e47510e203cfd$var$styles.shadow, style)
    })));
});
var $882f21053ba9c33f8b6e47510e203cfd$export$9099ad97b570f7c = $882f21053ba9c33f8b6e47510e203cfd$var$TextareaAutosize;
