import   "ff2f185dffa1dffadbb7b27ebbd77d20:react";
import   "ff2f185dffa1dffadbb7b27ebbd77d20:react-dom";
import   "ff2f185dffa1dffadbb7b27ebbd77d20:prop-types";
import   "ff2f185dffa1dffadbb7b27ebbd77d20:../utils/ownerDocument";
import   "ff2f185dffa1dffadbb7b27ebbd77d20:../utils/useForkRef";
import   "ff2f185dffa1dffadbb7b27ebbd77d20:@material-ui/utils";
/**
 * Utility component that locks focus inside the component.
 */ function $ff2f185dffa1dffadbb7b27ebbd77d20$var$Unstable_TrapFocus(props) {
    var children = props.children, _props$disableAutoFoc = props.disableAutoFocus, disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc, _props$disableEnforce = props.disableEnforceFocus, disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce, _props$disableRestore = props.disableRestoreFocus, disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore, getDoc = props.getDoc, isEnabled = props.isEnabled, open = props.open;
    var ignoreNextEnforceFocus = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8();
    var sentinelStart = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var sentinelEnd = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var nodeToRestore = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8();
    var rootRef = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8(null); // can be removed once we drop support for non ref forwarding class components
    var handleOwnRef = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$e04575e0186a275b(function(instance) {
        // #StrictMode ready
        rootRef.current = $ff2f185dffa1dffadbb7b27ebbd77d20$import$9c1aa63963514e3e$1817be7fffc127f2(instance);
    }, []);
    var handleRef = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f0ac2eb29a789ac2$9099ad97b570f7c(children.ref, handleOwnRef);
    var prevOpenRef = $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$575893c07881cfe8();
    $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        prevOpenRef.current = open;
    }, [
        open
    ]);
    if (!prevOpenRef.current && open && typeof window !== 'undefined') // WARNING: Potentially unsafe in concurrent mode.
    // The way the read on `nodeToRestore` is setup could make this actually safe.
    // Say we render `open={false}` -> `open={true}` but never commit.
    // We have now written a state that wasn't committed. But no committed effect
    // will read this wrong value. We only read from `nodeToRestore` in effects
    // that were committed on `open={true}`
    // WARNING: Prevents the instance from being garbage collected. Should only
    // hold a weak ref.
    nodeToRestore.current = getDoc().activeElement;
    $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$7e977b4ca969aabd(function() {
        if (!open) return;
        var doc = $ff2f185dffa1dffadbb7b27ebbd77d20$import$bc270da7a301e7e$9099ad97b570f7c(rootRef.current); // We might render an empty child.
        if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute('tabIndex')) rootRef.current.setAttribute('tabIndex', -1);
            rootRef.current.focus();
        }
        var contain = function contain1() {
            var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.
            // Contain can be called between the component being unmounted and its cleanup function being run.
            if (rootElement === null) return;
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
                ignoreNextEnforceFocus.current = false;
                return;
            }
            if (rootRef.current && !rootRef.current.contains(doc.activeElement)) rootRef.current.focus();
        };
        var loopFocus = function loopFocus1(event) {
            // 9 = Tab
            if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) return;
             // Make sure the next tab starts from the right place.
            if (doc.activeElement === rootRef.current) {
                // We need to ignore the next contain as
                // it will try to move the focus back to the rootRef element.
                ignoreNextEnforceFocus.current = true;
                if (event.shiftKey) sentinelEnd.current.focus();
                else sentinelStart.current.focus();
            }
        };
        doc.addEventListener('focus', contain, true);
        doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
        var interval = setInterval(function() {
            contain();
        }, 50);
        return function() {
            clearInterval(interval);
            doc.removeEventListener('focus', contain, true);
            doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()
            if (!disableRestoreFocus) {
                // In IE 11 it is possible for document.activeElement to be null resulting
                // in nodeToRestore.current being null.
                // Not all elements in IE 11 have a focus method.
                // Once IE 11 support is dropped the focus() call can be unconditional.
                if (nodeToRestore.current && nodeToRestore.current.focus) nodeToRestore.current.focus();
                nodeToRestore.current = null;
            }
        };
    }, [
        disableAutoFocus,
        disableEnforceFocus,
        disableRestoreFocus,
        isEnabled,
        open
    ]);
    return(/*#__PURE__*/ $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$2f8418d37d4320b9($ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$44f93cb792444969, null, /*#__PURE__*/ $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$2f8418d37d4320b9("div", {
        tabIndex: 0,
        ref: sentinelStart,
        "data-test": "sentinelStart"
    }), /*#__PURE__*/ $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$228915fa085e29fe(children, {
        ref: handleRef
    }), /*#__PURE__*/ $ff2f185dffa1dffadbb7b27ebbd77d20$import$f02ba03fc070e88c$2f8418d37d4320b9("div", {
        tabIndex: 0,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
    })));
}
var $ff2f185dffa1dffadbb7b27ebbd77d20$export$9099ad97b570f7c = $ff2f185dffa1dffadbb7b27ebbd77d20$var$Unstable_TrapFocus;
