import   "a562035c37b0f4f83d93d64165e94e25:@babel/runtime/helpers/esm/defineProperty";
function $a562035c37b0f4f83d93d64165e94e25$export$48b75708c8c75cd3(value) {
    return String(parseFloat(value)).length === String(value).length;
} // Ported from Compass
function $a562035c37b0f4f83d93d64165e94e25$export$a77915f982fb0631(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
} // Emulate the sass function "unitless"
function $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(length) {
    return parseFloat(length);
} // Convert any CSS <length> or <percentage> value to any another.
function $a562035c37b0f4f83d93d64165e94e25$export$89c2cc3b6c94cff3(baseFontSize) {
    return function(length, toUnit) {
        var fromUnit = $a562035c37b0f4f83d93d64165e94e25$export$a77915f982fb0631(length); // Optimize for cases where `from` and `to` units are accidentally the same.
        if (fromUnit === toUnit) return length;
         // Convert input length to pixels.
        var pxLength = $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(length);
        if (fromUnit !== 'px') {
            if (fromUnit === 'em') pxLength = $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(length) * $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(baseFontSize);
            else if (fromUnit === 'rem') {
                pxLength = $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(length) * $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(baseFontSize);
                return length;
            }
        } // Convert length in pixels to the output unit
        var outputLength = pxLength;
        if (toUnit !== 'px') {
            if (toUnit === 'em') outputLength = pxLength / $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(baseFontSize);
            else if (toUnit === 'rem') outputLength = pxLength / $a562035c37b0f4f83d93d64165e94e25$export$2df5e12560108b8d(baseFontSize);
            else return length;
        }
        return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
}
function $a562035c37b0f4f83d93d64165e94e25$export$28b4aad4c6692e8a(_ref) {
    var size = _ref.size, grid = _ref.grid;
    var sizeBelow = size - size % grid;
    var sizeAbove = sizeBelow + grid;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
function $a562035c37b0f4f83d93d64165e94e25$export$c351fe1c64b834a(_ref2) {
    var lineHeight = _ref2.lineHeight, pixels = _ref2.pixels, htmlFontSize = _ref2.htmlFontSize;
    return pixels / (lineHeight * htmlFontSize);
}
function $a562035c37b0f4f83d93d64165e94e25$export$154f79b3783f9957(_ref3) {
    var cssProperty = _ref3.cssProperty, min = _ref3.min, max = _ref3.max, _ref3$unit = _ref3.unit, unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit, _ref3$breakpoints = _ref3.breakpoints, breakpoints = _ref3$breakpoints === void 0 ? [
        600,
        960,
        1280
    ] : _ref3$breakpoints, _ref3$transform = _ref3.transform, transform = _ref3$transform === void 0 ? null : _ref3$transform;
    var output = $a562035c37b0f4f83d93d64165e94e25$import$1a28daa4a80cb108$9099ad97b570f7c({
    }, cssProperty, "".concat(min).concat(unit));
    var factor = (max - min) / breakpoints[breakpoints.length - 1];
    breakpoints.forEach(function(breakpoint) {
        var value = min + factor * breakpoint;
        if (transform !== null) value = transform(value);
        output["@media (min-width:".concat(breakpoint, "px)")] = $a562035c37b0f4f83d93d64165e94e25$import$1a28daa4a80cb108$9099ad97b570f7c({
        }, cssProperty, "".concat(Math.round(value * 10000) / 10000).concat(unit));
    });
    return output;
}
