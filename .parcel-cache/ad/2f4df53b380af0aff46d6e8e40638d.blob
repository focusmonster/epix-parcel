import   "1350d36b1cd1a5b99a757c5b66a95249:@babel/runtime/helpers/esm/extends";
import   "1350d36b1cd1a5b99a757c5b66a95249:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "1350d36b1cd1a5b99a757c5b66a95249:@material-ui/utils";
import   "1350d36b1cd1a5b99a757c5b66a95249:@material-ui/utils";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/common";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/grey";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/indigo";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/pink";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/red";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/orange";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/blue";
import   "1350d36b1cd1a5b99a757c5b66a95249:../colors/green";
import   "1350d36b1cd1a5b99a757c5b66a95249:./colorManipulator";
var $1350d36b1cd1a5b99a757c5b66a95249$export$b37c18a2a42a869f = {
    // The colors used to style the text.
    text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.54)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)',
        // Text hints.
        hint: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
        paper: $1350d36b1cd1a5b99a757c5b66a95249$import$3969986e96e27d7a$9099ad97b570f7c.white,
        default: $1350d36b1cd1a5b99a757c5b66a95249$import$6e3345e566279baa$9099ad97b570f7c[50]
    },
    // The colors used to style the action elements.
    action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
    }
};
var $1350d36b1cd1a5b99a757c5b66a95249$export$f4bd312372270589 = {
    text: {
        primary: $1350d36b1cd1a5b99a757c5b66a95249$import$3969986e96e27d7a$9099ad97b570f7c.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        hint: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
        paper: $1350d36b1cd1a5b99a757c5b66a95249$import$6e3345e566279baa$9099ad97b570f7c[800],
        default: '#303030'
    },
    action: {
        active: $1350d36b1cd1a5b99a757c5b66a95249$import$3969986e96e27d7a$9099ad97b570f7c.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
    }
};
function $1350d36b1cd1a5b99a757c5b66a95249$var$addLightOrDark(intent, direction, shade, tonalOffset) {
    var tonalOffsetLight = tonalOffset.light || tonalOffset;
    var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) intent[direction] = intent[shade];
        else if (direction === 'light') intent.light = $1350d36b1cd1a5b99a757c5b66a95249$import$28c7d5a2dc70c9c8$4b2aa9509b3a299c(intent.main, tonalOffsetLight);
        else if (direction === 'dark') intent.dark = $1350d36b1cd1a5b99a757c5b66a95249$import$28c7d5a2dc70c9c8$35364ebff010920c(intent.main, tonalOffsetDark);
    }
}
function $1350d36b1cd1a5b99a757c5b66a95249$export$9099ad97b570f7c(palette) {
    var _palette$primary = palette.primary, primary = _palette$primary === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$cac0379a3e41c88$9099ad97b570f7c[300],
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$cac0379a3e41c88$9099ad97b570f7c[500],
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$cac0379a3e41c88$9099ad97b570f7c[700]
    } : _palette$primary, _palette$secondary = palette.secondary, secondary = _palette$secondary === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$373ed5f58b1c1194$9099ad97b570f7c.A200,
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$373ed5f58b1c1194$9099ad97b570f7c.A400,
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$373ed5f58b1c1194$9099ad97b570f7c.A700
    } : _palette$secondary, _palette$error = palette.error, error = _palette$error === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$51de1a21ca31bf80$9099ad97b570f7c[300],
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$51de1a21ca31bf80$9099ad97b570f7c[500],
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$51de1a21ca31bf80$9099ad97b570f7c[700]
    } : _palette$error, _palette$warning = palette.warning, warning = _palette$warning === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$4f40d754d034a56b$9099ad97b570f7c[300],
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$4f40d754d034a56b$9099ad97b570f7c[500],
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$4f40d754d034a56b$9099ad97b570f7c[700]
    } : _palette$warning, _palette$info = palette.info, info = _palette$info === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$10f67d0829d28d1a$9099ad97b570f7c[300],
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$10f67d0829d28d1a$9099ad97b570f7c[500],
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$10f67d0829d28d1a$9099ad97b570f7c[700]
    } : _palette$info, _palette$success = palette.success, success = _palette$success === void 0 ? {
        light: $1350d36b1cd1a5b99a757c5b66a95249$import$48c4a3df6daa0386$9099ad97b570f7c[300],
        main: $1350d36b1cd1a5b99a757c5b66a95249$import$48c4a3df6daa0386$9099ad97b570f7c[500],
        dark: $1350d36b1cd1a5b99a757c5b66a95249$import$48c4a3df6daa0386$9099ad97b570f7c[700]
    } : _palette$success, _palette$type = palette.type, type = _palette$type === void 0 ? 'light' : _palette$type, _palette$contrastThre = palette.contrastThreshold, contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre, _palette$tonalOffset = palette.tonalOffset, tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset, other = $1350d36b1cd1a5b99a757c5b66a95249$import$e114c77af6cc4d77$9099ad97b570f7c(palette, [
        "primary",
        "secondary",
        "error",
        "warning",
        "info",
        "success",
        "type",
        "contrastThreshold",
        "tonalOffset"
    ]); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    function getContrastText(background) {
        var contrastText = $1350d36b1cd1a5b99a757c5b66a95249$import$28c7d5a2dc70c9c8$24c1b3e0727c6be1(background, $1350d36b1cd1a5b99a757c5b66a95249$export$f4bd312372270589.text.primary) >= contrastThreshold ? $1350d36b1cd1a5b99a757c5b66a95249$export$f4bd312372270589.text.primary : $1350d36b1cd1a5b99a757c5b66a95249$export$b37c18a2a42a869f.text.primary;
        var contrast;
        return contrastText;
    }
    var augmentColor = function augmentColor1(color) {
        var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
        var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
        var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
        color = $1350d36b1cd1a5b99a757c5b66a95249$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        }, color);
        if (!color.main && color[mainShade]) color.main = color[mainShade];
        if (!color.main) throw new Error($1350d36b1cd1a5b99a757c5b66a95249$import$4ddfa5b020de25c6$8144764b12c0d2ad(4, mainShade));
        if (typeof color.main !== 'string') throw new Error($1350d36b1cd1a5b99a757c5b66a95249$import$4ddfa5b020de25c6$8144764b12c0d2ad(5, JSON.stringify(color.main)));
        $1350d36b1cd1a5b99a757c5b66a95249$var$addLightOrDark(color, 'light', lightShade, tonalOffset);
        $1350d36b1cd1a5b99a757c5b66a95249$var$addLightOrDark(color, 'dark', darkShade, tonalOffset);
        if (!color.contrastText) color.contrastText = getContrastText(color.main);
        return color;
    };
    var types = {
        dark: $1350d36b1cd1a5b99a757c5b66a95249$export$f4bd312372270589,
        light: $1350d36b1cd1a5b99a757c5b66a95249$export$b37c18a2a42a869f
    };
    var paletteOutput = $1350d36b1cd1a5b99a757c5b66a95249$import$4ddfa5b020de25c6$47703990c37189f4($1350d36b1cd1a5b99a757c5b66a95249$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        // A collection of common colors.
        common: $1350d36b1cd1a5b99a757c5b66a95249$import$3969986e96e27d7a$9099ad97b570f7c,
        // The palette type, can be light or dark.
        type: type,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor(primary),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor(error),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor(warning),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor(info),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor(success),
        // The grey colors.
        grey: $1350d36b1cd1a5b99a757c5b66a95249$import$6e3345e566279baa$9099ad97b570f7c,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold: contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText: getContrastText,
        // Generate a rich color object.
        augmentColor: augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset: tonalOffset
    }, types[type]), other);
    return paletteOutput;
}
