import   "d8e7a205e9ce9598602004e0c64c9b60:@babel/runtime/helpers/esm/extends";
import   "d8e7a205e9ce9598602004e0c64c9b60:@babel/runtime/helpers/esm/objectWithoutProperties";
import   "d8e7a205e9ce9598602004e0c64c9b60:react";
import   "d8e7a205e9ce9598602004e0c64c9b60:react-is";
import   "d8e7a205e9ce9598602004e0c64c9b60:prop-types";
import   "d8e7a205e9ce9598602004e0c64c9b60:react-dom";
import   "d8e7a205e9ce9598602004e0c64c9b60:../utils/ownerDocument";
import   "d8e7a205e9ce9598602004e0c64c9b60:../List";
import   "d8e7a205e9ce9598602004e0c64c9b60:../utils/getScrollbarSize";
import   "d8e7a205e9ce9598602004e0c64c9b60:../utils/useForkRef";
function $d8e7a205e9ce9598602004e0c64c9b60$var$nextItem(list, item, disableListWrap) {
    if (list === item) return list.firstChild;
    if (item && item.nextElementSibling) return item.nextElementSibling;
    return disableListWrap ? null : list.firstChild;
}
function $d8e7a205e9ce9598602004e0c64c9b60$var$previousItem(list, item, disableListWrap) {
    if (list === item) return disableListWrap ? list.firstChild : list.lastChild;
    if (item && item.previousElementSibling) return item.previousElementSibling;
    return disableListWrap ? null : list.lastChild;
}
function $d8e7a205e9ce9598602004e0c64c9b60$var$textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === undefined) return true;
    var text = nextFocus.innerText;
    if (text === undefined) // jsdom doesn't support innerText
    text = nextFocus.textContent;
    text = text.trim().toLowerCase();
    if (text.length === 0) return false;
    if (textCriteria.repeating) return text[0] === textCriteria.keys[0];
    return text.indexOf(textCriteria.keys.join('')) === 0;
}
function $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    var wrappedOnce = false;
    var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while(nextFocus){
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
            if (wrappedOnce) return;
            wrappedOnce = true;
        } // Same logic as useAutocomplete.js
        var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
        if (!nextFocus.hasAttribute('tabindex') || !$d8e7a205e9ce9598602004e0c64c9b60$var$textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        else {
            nextFocus.focus();
            return;
        }
    }
}
var $d8e7a205e9ce9598602004e0c64c9b60$var$useEnhancedEffect = typeof window === 'undefined' ? $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$7e977b4ca969aabd : $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$3839ad89c0ec6b31;
/**
 * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
 * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you
 * use it separately you need to move focus into the component manually. Once
 * the focus is placed inside the component it is fully keyboard accessible.
 */ var $d8e7a205e9ce9598602004e0c64c9b60$var$MenuList = /*#__PURE__*/ $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$ac92bb288368c37c(function MenuList(props, ref) {
    var actions = props.actions, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, _props$autoFocusItem = props.autoFocusItem, autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem, children = props.children, className = props.className, _props$disabledItemsF = props.disabledItemsFocusable, disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF, _props$disableListWra = props.disableListWrap, disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra, onKeyDown = props.onKeyDown, _props$variant = props.variant, variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant, other = $d8e7a205e9ce9598602004e0c64c9b60$import$e114c77af6cc4d77$9099ad97b570f7c(props, [
        "actions",
        "autoFocus",
        "autoFocusItem",
        "children",
        "className",
        "disabledItemsFocusable",
        "disableListWrap",
        "onKeyDown",
        "variant"
    ]);
    var listRef = $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$575893c07881cfe8(null);
    var textCriteriaRef = $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$575893c07881cfe8({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
    });
    $d8e7a205e9ce9598602004e0c64c9b60$var$useEnhancedEffect(function() {
        if (autoFocus) listRef.current.focus();
    }, [
        autoFocus
    ]);
    $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$718bc1f42abf35a1(actions, function() {
        return {
            adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
                // Let's ignore that piece of logic if users are already overriding the width
                // of the menu.
                var noExplicitWidth = !listRef.current.style.width;
                if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
                    var scrollbarSize = "".concat($d8e7a205e9ce9598602004e0c64c9b60$import$d91c458c03c8226e$9099ad97b570f7c(true), "px");
                    listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
                    listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
                }
                return listRef.current;
            }
        };
    }, []);
    var handleKeyDown = function handleKeyDown1(event) {
        var list = listRef.current;
        var key = event.key;
        /**
     * @type {Element} - will always be defined since we are in a keydown handler
     * attached to an element. A keydown event is either dispatched to the activeElement
     * or document.body or document.documentElement. Only the first case will
     * trigger this specific handler.
     */ var currentFocus = $d8e7a205e9ce9598602004e0c64c9b60$import$bc270da7a301e7e$9099ad97b570f7c(list).activeElement;
        if (key === 'ArrowDown') {
            // Prevent scroll of the page
            event.preventDefault();
            $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, $d8e7a205e9ce9598602004e0c64c9b60$var$nextItem);
        } else if (key === 'ArrowUp') {
            event.preventDefault();
            $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, $d8e7a205e9ce9598602004e0c64c9b60$var$previousItem);
        } else if (key === 'Home') {
            event.preventDefault();
            $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, null, disableListWrap, disabledItemsFocusable, $d8e7a205e9ce9598602004e0c64c9b60$var$nextItem);
        } else if (key === 'End') {
            event.preventDefault();
            $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, null, disableListWrap, disabledItemsFocusable, $d8e7a205e9ce9598602004e0c64c9b60$var$previousItem);
        } else if (key.length === 1) {
            var criteria = textCriteriaRef.current;
            var lowerKey = key.toLowerCase();
            var currTime = performance.now();
            if (criteria.keys.length > 0) {
                // Reset
                if (currTime - criteria.lastTime > 500) {
                    criteria.keys = [];
                    criteria.repeating = true;
                    criteria.previousKeyMatched = true;
                } else if (criteria.repeating && lowerKey !== criteria.keys[0]) criteria.repeating = false;
            }
            criteria.lastTime = currTime;
            criteria.keys.push(lowerKey);
            var keepFocusOnCurrent = currentFocus && !criteria.repeating && $d8e7a205e9ce9598602004e0c64c9b60$var$textCriteriaMatches(currentFocus, criteria);
            if (criteria.previousKeyMatched && (keepFocusOnCurrent || $d8e7a205e9ce9598602004e0c64c9b60$var$moveFocus(list, currentFocus, false, disabledItemsFocusable, $d8e7a205e9ce9598602004e0c64c9b60$var$nextItem, criteria))) event.preventDefault();
            else criteria.previousKeyMatched = false;
        }
        if (onKeyDown) onKeyDown(event);
    };
    var handleOwnRef = $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$e04575e0186a275b(function(instance) {
        // #StrictMode ready
        listRef.current = $d8e7a205e9ce9598602004e0c64c9b60$import$9c1aa63963514e3e$1817be7fffc127f2(instance);
    }, []);
    var handleRef = $d8e7a205e9ce9598602004e0c64c9b60$import$f0ac2eb29a789ac2$9099ad97b570f7c(handleOwnRef, ref);
    /**
   * the index of the item should receive focus
   * in a `variant="selectedMenu"` it's the first `selected` item
   * otherwise it's the very first item.
   */ var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback
    $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$4a1442b8e7333aeb.forEach(children, function(child, index) {
        if (!/*#__PURE__*/ $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$64e9a1defe72209(child)) return;
        if (!child.props.disabled) {
            if (variant === 'selectedMenu' && child.props.selected) activeItemIndex = index;
            else if (activeItemIndex === -1) activeItemIndex = index;
        }
    });
    var items = $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$4a1442b8e7333aeb.map(children, function(child, index) {
        if (index === activeItemIndex) {
            var newChildProps = {
            };
            if (autoFocusItem) newChildProps.autoFocus = true;
            if (child.props.tabIndex === undefined && variant === 'selectedMenu') newChildProps.tabIndex = 0;
            return(/*#__PURE__*/ $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$228915fa085e29fe(child, newChildProps));
        }
        return child;
    });
    return(/*#__PURE__*/ $d8e7a205e9ce9598602004e0c64c9b60$import$f02ba03fc070e88c$2f8418d37d4320b9($d8e7a205e9ce9598602004e0c64c9b60$import$afe2ae5afc19087e$9099ad97b570f7c, $d8e7a205e9ce9598602004e0c64c9b60$import$b5eba6ed2ba96e9b$9099ad97b570f7c({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
    }, other), items));
});
var $d8e7a205e9ce9598602004e0c64c9b60$export$9099ad97b570f7c = $d8e7a205e9ce9598602004e0c64c9b60$var$MenuList;
